P' -> P
P -> func funcs
funcs -> func funcs
funcs -> ε
func -> type id ( args ) func_body
type -> int
type -> short
type -> long
type -> char
type -> float
type -> double
type -> boolean
type -> record
type -> void
type -> unsigned type
args -> type id arg
args -> ε
arg -> , type id arg
arg -> ε
func_body -> ;
func_body -> block
block -> { define_stmts stmts }
define_stmts -> define_stmt define_stmts
define_stmts -> ε
define_stmt -> type id init vars ;
init -> = expression
init -> [ const ]
init -> ε
vars -> , id init vars
vars -> ε
stmts -> stmt stmts
stmts -> ε
stmt -> assign_stmt
stmt -> jump_stmt
stmt -> iteration_stmt
stmt -> branch_stmt
assign_stmt -> expression ;
jump_stmt -> continue ;
jump_stmt -> break ;
jump_stmt -> return isnull_expr ;
iteration_stmt -> while ( logical_expression ) block_stmt
iteration_stmt -> for ( isnull_expr ; isnull_expr ; isnull_expr ) block_stmt
iteration_stmt -> do block_stmt while ( logical_expression ) ;
branch_stmt -> if ( logical_expression ) block_stmt result
result -> else block_stmt
result -> ε
logical_expression -> ! expression bool_expression
logical_expression -> expression bool_expression
bool_expression -> lop expression bool_expression
bool_expression -> ε
lop -> &&
lop -> ||
branch_stmt -> switch ( id ) { case_stmt case_stmts default_stmt }
case_stmts -> case_stmt case_stmts
case_stmts -> ε
case_stmt -> case const : stmts
default_stmt -> default : stmts
default_stmt -> ε
block_stmt -> { stmts }
isnull_expr -> expression
isnull_expr -> ε
expression -> value operation
operation -> compare_op value
operation -> equal_op value
operation -> ε
compare_op -> >
compare_op -> >=
compare_op -> <
compare_op -> <=
compare_op -> ==
compare_op -> !=
equal_op -> =
value -> item value'
value' -> + item value'
value' -> - item value'
value' -> ε
item -> factor item'
item' -> * factor item'
item' -> / factor item'
item' -> % factor item'
item' -> ε
factor -> ( value )
factor -> id call_func
factor -> const
call_func -> ( es )
call_func -> ε
es -> isnull_expr isnull_es
isnull_es -> , isnull_expr isnull_es
isnull_es -> ε