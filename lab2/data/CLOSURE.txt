I0
type -> .float  	,  id 
type -> .record  	,  id 
type -> .long  	,  id 
type -> .unsigned type  	,  id 
type -> .void  	,  id 
type -> .boolean  	,  id 
func -> .type id ( args ) func_body  	,  boolean void double record char short unsigned float int long # 
type -> .int  	,  id 
P -> .func funcs  	,  # 
type -> .double  	,  id 
P' -> .P  	,  # 
type -> .char  	,  id 
type -> .short  	,  id 

I1
type -> .int  	,  id 
type -> .double  	,  id 
type -> .float  	,  id 
type -> .record  	,  id 
type ->  unsigned.type  	,  id 
type -> .long  	,  id 
type -> .unsigned type  	,  id 
type -> .void  	,  id 
type -> .char  	,  id 
type -> .short  	,  id 
type -> .boolean  	,  id 

I2
type ->  short.  	,  id 

I3
type ->  float.  	,  id 

I4
type ->  record.  	,  id 

I5
type ->  long.  	,  id 

I6
type ->  void.  	,  id 

I7
type ->  char.  	,  id 

I8
type ->  int.  	,  id 

I9
type -> .float  	,  id 
type -> .record  	,  id 
type -> .long  	,  id 
type -> .unsigned type  	,  id 
funcs -> .func funcs  	,  # 
type -> .void  	,  id 
type -> .boolean  	,  id 
func -> .type id ( args ) func_body  	,  boolean void double record char short unsigned float int long # 
type -> .int  	,  id 
P ->  func.funcs  	,  # 
type -> .double  	,  id 
funcs -> .  	,  # 
type -> .char  	,  id 
type -> .short  	,  id 

I10
func ->  type.id ( args ) func_body  	,  boolean void double record char short unsigned float int long # 

I11
type ->  boolean.  	,  id 

I12
type ->  double.  	,  id 

I13
P' ->  P.  	,  # 

I14
type ->  unsigned type.  	,  id 

I15
P ->  func funcs.  	,  # 

I16
type -> .float  	,  id 
type -> .record  	,  id 
funcs ->  func.funcs  	,  # 
type -> .long  	,  id 
type -> .unsigned type  	,  id 
funcs -> .func funcs  	,  # 
type -> .void  	,  id 
type -> .boolean  	,  id 
func -> .type id ( args ) func_body  	,  boolean void double record char short unsigned float int long # 
type -> .int  	,  id 
type -> .double  	,  id 
funcs -> .  	,  # 
type -> .char  	,  id 
type -> .short  	,  id 

I17
func ->  type id.( args ) func_body  	,  boolean void double record char short unsigned float int long # 

I18
type -> .float  	,  id 
type -> .record  	,  id 
type -> .long  	,  id 
type -> .unsigned type  	,  id 
type -> .void  	,  id 
type -> .boolean  	,  id 
type -> .int  	,  id 
args -> .type id arg  	,  ) 
type -> .double  	,  id 
func ->  type id (.args ) func_body  	,  boolean void double record char short unsigned float int long # 
args -> .  	,  ) 
type -> .char  	,  id 
type -> .short  	,  id 

I19
funcs ->  func funcs.  	,  # 

I20
func ->  type id ( args.) func_body  	,  boolean void double record char short unsigned float int long # 

I21
args ->  type.id arg  	,  ) 

I22
arg -> .  	,  ) 
args ->  type id.arg  	,  ) 
arg -> ., type id arg  	,  ) 

I23
func_body -> .;  	,  boolean void double record char short unsigned float int long # 
block -> .{ define_stmts stmts }  	,  boolean void double record char short unsigned float int long # 
func ->  type id ( args ).func_body  	,  boolean void double record char short unsigned float int long # 
func_body -> .block  	,  boolean void double record char short unsigned float int long # 

I24
type -> .int  	,  id 
type -> .double  	,  id 
type -> .float  	,  id 
arg ->  ,.type id arg  	,  ) 
type -> .record  	,  id 
type -> .long  	,  id 
type -> .unsigned type  	,  id 
type -> .void  	,  id 
type -> .char  	,  id 
type -> .short  	,  id 
type -> .boolean  	,  id 

I25
args ->  type id arg.  	,  ) 

I26
func ->  type id ( args ) func_body.  	,  boolean void double record char short unsigned float int long # 

I27
func_body ->  ;.  	,  boolean void double record char short unsigned float int long # 

I28
define_stmts -> .  	,  const break continue for ( do id while if } return switch 
block ->  {.define_stmts stmts }  	,  boolean void double record char short unsigned float int long # 
type -> .float  	,  id 
define_stmt -> .type id init vars ;  	,  boolean void double record char short unsigned float int long const break continue for ( do id while if } return switch 
type -> .record  	,  id 
type -> .long  	,  id 
type -> .unsigned type  	,  id 
define_stmts -> .define_stmt define_stmts  	,  const break continue for ( do id while if } return switch 
type -> .void  	,  id 
type -> .boolean  	,  id 
type -> .int  	,  id 
type -> .double  	,  id 
type -> .char  	,  id 
type -> .short  	,  id 

I29
func_body ->  block.  	,  boolean void double record char short unsigned float int long # 

I30
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; 
stmts -> .  	,  } 
stmt -> .jump_stmt  	,  const break continue for ( do id while if return switch } 
branch_stmt -> .if ( logical_expression ) block_stmt result  	,  const break continue for ( do id while if return switch } 
factor -> .id  	,  % * / + - == <= < != = > >= ; 
block ->  { define_stmts.stmts }  	,  boolean void double record char short unsigned float int long # 
expression -> .value operation  	,  ; 
iteration_stmt -> .while ( logical_expression ) block_stmt  	,  const break continue for ( do id while if return switch } 
stmts -> .stmt stmts  	,  } 
jump_stmt -> .return isnull_expr ;  	,  const break continue for ( do id while if return switch } 
iteration_stmt -> .do block_stmt while ( logical_expression ) ;  	,  const break continue for ( do id while if return switch } 
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; 
stmt -> .iteration_stmt  	,  const break continue for ( do id while if return switch } 
iteration_stmt -> .for ( isnull_expr ; isnull_expr ; isnull_expr ) block_stmt  	,  const break continue for ( do id while if return switch } 
stmt -> .branch_stmt  	,  const break continue for ( do id while if return switch } 
stmt -> .assign_stmt  	,  const break continue for ( do id while if return switch } 
jump_stmt -> .break ;  	,  const break continue for ( do id while if return switch } 
item -> .factor item'  	,  + - == <= < != = > >= ; 
assign_stmt -> .expression ;  	,  const break continue for ( do id while if return switch } 
jump_stmt -> .continue ;  	,  const break continue for ( do id while if return switch } 
factor -> .const  	,  % * / + - == <= < != = > >= ; 
branch_stmt -> .switch ( id ) { case_stmt case_stmts default_stmt }  	,  const break continue for ( do id while if return switch } 
value -> .item value'  	,  == <= < != = > >= ; 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; 

I31
arg ->  , type.id arg  	,  ) 

I32
define_stmt ->  type.id init vars ;  	,  boolean void double record char short unsigned float int long const break continue for ( do id while if } return switch 

I33
define_stmts -> .  	,  const break continue for ( do id while if } return switch 
type -> .float  	,  id 
define_stmt -> .type id init vars ;  	,  boolean void double record char short unsigned float int long const break continue for ( do id while if } return switch 
type -> .record  	,  id 
type -> .long  	,  id 
type -> .unsigned type  	,  id 
define_stmts -> .define_stmt define_stmts  	,  const break continue for ( do id while if } return switch 
type -> .void  	,  id 
define_stmts ->  define_stmt.define_stmts  	,  const break continue for ( do id while if } return switch 
type -> .boolean  	,  id 
type -> .int  	,  id 
type -> .double  	,  id 
type -> .char  	,  id 
type -> .short  	,  id 

I34
jump_stmt ->  continue.;  	,  const break continue for ( do id while if return switch } 

I35
arg -> .  	,  ) 
arg -> ., type id arg  	,  ) 
arg ->  , type id.arg  	,  ) 

I36
stmt ->  iteration_stmt.  	,  const break continue for ( do id while if return switch } 

I37
item' -> .% factor item'  	,  + - == <= < != = > >= ; 
item' -> .* factor item'  	,  + - == <= < != = > >= ; 
item' -> .  	,  + - == <= < != = > >= ; 
item ->  factor.item'  	,  + - == <= < != = > >= ; 
item' -> ./ factor item'  	,  + - == <= < != = > >= ; 

I38
iteration_stmt ->  for.( isnull_expr ; isnull_expr ; isnull_expr ) block_stmt  	,  const break continue for ( do id while if return switch } 

I39
define_stmts ->  define_stmt define_stmts.  	,  const break continue for ( do id while if } return switch 

I40
assign_stmt ->  expression.;  	,  const break continue for ( do id while if return switch } 

I41
value' -> .+ item value'  	,  == <= < != = > >= ; 
value ->  item.value'  	,  == <= < != = > >= ; 
value' -> .- item value'  	,  == <= < != = > >= ; 
value' -> .  	,  == <= < != = > >= ; 

I42
jump_stmt ->  break.;  	,  const break continue for ( do id while if return switch } 

I43
isnull_expr -> .expression  	,  ; 
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; 
isnull_expr -> .  	,  ; 
factor -> .id  	,  % * / + - == <= < != = > >= ; 
expression -> .value operation  	,  ; 
item -> .factor item'  	,  + - == <= < != = > >= ; 
jump_stmt ->  return.isnull_expr ;  	,  const break continue for ( do id while if return switch } 
factor -> .const  	,  % * / + - == <= < != = > >= ; 
value -> .item value'  	,  == <= < != = > >= ; 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; 

I44
stmt ->  assign_stmt.  	,  const break continue for ( do id while if return switch } 

I45
stmt ->  jump_stmt.  	,  const break continue for ( do id while if return switch } 

I46
value -> .item value'  	,  ) 
item -> .factor item'  	,  + - ) 
factor -> .const  	,  % * / + - ) 
factor -> .id call_func  	,  % * / + - ) 
factor -> .id [ const ]  	,  % * / + - ) 
factor -> .( value )  	,  % * / + - ) 
factor -> .id  	,  % * / + - ) 
factor ->  (.value )  	,  % * / + - == <= < != = > >= ; 

I47
define_stmt ->  type id.init vars ;  	,  boolean void double record char short unsigned float int long const break continue for ( do id while if } return switch 
init -> .  	,  ; , 
init -> .[ const ]  	,  ; , 
init -> .= expression  	,  ; , 

I48
block ->  { define_stmts stmts.}  	,  boolean void double record char short unsigned float int long # 

I49
branch_stmt ->  switch.( id ) { case_stmt case_stmts default_stmt }  	,  const break continue for ( do id while if return switch } 

I50
iteration_stmt ->  while.( logical_expression ) block_stmt  	,  const break continue for ( do id while if return switch } 

I51
branch_stmt ->  if.( logical_expression ) block_stmt result  	,  const break continue for ( do id while if return switch } 

I52
block_stmt -> .{ stmts }  	,  while 
iteration_stmt ->  do.block_stmt while ( logical_expression ) ;  	,  const break continue for ( do id while if return switch } 

I53
compare_op -> .<=  	,  const ( id 
expression ->  value.operation  	,  ; 
compare_op -> .>  	,  const ( id 
equal_op -> .=  	,  const ( id 
operation -> .equal_op value  	,  ; 
compare_op -> .>=  	,  const ( id 
compare_op -> .<  	,  const ( id 
compare_op -> .==  	,  const ( id 
compare_op -> .!=  	,  const ( id 
operation -> .compare_op value  	,  ; 
operation -> .  	,  ; 

I54
stmt ->  branch_stmt.  	,  const break continue for ( do id while if return switch } 

I55
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; 
stmts ->  stmt.stmts  	,  } 
stmts -> .  	,  } 
stmt -> .jump_stmt  	,  const break continue for ( do id while if return switch } 
branch_stmt -> .if ( logical_expression ) block_stmt result  	,  const break continue for ( do id while if return switch } 
factor -> .id  	,  % * / + - == <= < != = > >= ; 
expression -> .value operation  	,  ; 
iteration_stmt -> .while ( logical_expression ) block_stmt  	,  const break continue for ( do id while if return switch } 
stmts -> .stmt stmts  	,  } 
jump_stmt -> .return isnull_expr ;  	,  const break continue for ( do id while if return switch } 
iteration_stmt -> .do block_stmt while ( logical_expression ) ;  	,  const break continue for ( do id while if return switch } 
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; 
stmt -> .iteration_stmt  	,  const break continue for ( do id while if return switch } 
iteration_stmt -> .for ( isnull_expr ; isnull_expr ; isnull_expr ) block_stmt  	,  const break continue for ( do id while if return switch } 
stmt -> .branch_stmt  	,  const break continue for ( do id while if return switch } 
stmt -> .assign_stmt  	,  const break continue for ( do id while if return switch } 
jump_stmt -> .break ;  	,  const break continue for ( do id while if return switch } 
item -> .factor item'  	,  + - == <= < != = > >= ; 
assign_stmt -> .expression ;  	,  const break continue for ( do id while if return switch } 
jump_stmt -> .continue ;  	,  const break continue for ( do id while if return switch } 
factor -> .const  	,  % * / + - == <= < != = > >= ; 
branch_stmt -> .switch ( id ) { case_stmt case_stmts default_stmt }  	,  const break continue for ( do id while if return switch } 
value -> .item value'  	,  == <= < != = > >= ; 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; 

I56
factor ->  id.[ const ]  	,  % * / + - == <= < != = > >= ; 
factor ->  id.call_func  	,  % * / + - == <= < != = > >= ; 
factor ->  id.  	,  % * / + - == <= < != = > >= ; 
call_func -> .( es )  	,  % * / + - == <= < != = > >= ; 

I57
factor ->  const.  	,  % * / + - == <= < != = > >= ; 

I58
block ->  { define_stmts stmts }.  	,  boolean void double record char short unsigned float int long # 

I59
value' -> .  	,  ) 
value' -> .+ item value'  	,  ) 
value ->  item.value'  	,  ) 
value' -> .- item value'  	,  ) 

I60
branch_stmt ->  switch (.id ) { case_stmt case_stmts default_stmt }  	,  const break continue for ( do id while if return switch } 

I61
factor ->  ( value.)  	,  % * / + - == <= < != = > >= ; 

I62
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; 
factor -> .id  	,  % * / + - == <= < != = > >= ; 
item -> .factor item'  	,  + - == <= < != = > >= ; 
value' ->  -.item value'  	,  == <= < != = > >= ; 
factor -> .const  	,  % * / + - == <= < != = > >= ; 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; 

I63
factor ->  id [.const ]  	,  % * / + - == <= < != = > >= ; 

I64
factor ->  id call_func.  	,  % * / + - == <= < != = > >= ; 

I65
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; 
factor -> .id  	,  % * / + - == <= < != = > >= ; 
item' ->  /.factor item'  	,  + - == <= < != = > >= ; 
factor -> .const  	,  % * / + - == <= < != = > >= ; 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; 

I66
compare_op ->  <=.  	,  const ( id 

I67
branch_stmt ->  if (.logical_expression ) block_stmt result  	,  const break continue for ( do id while if return switch } 
logical_expression -> .expression bool_expression  	,  ) 
item -> .factor item'  	,  + - == <= < != = > >= && || ) 
factor -> .id call_func  	,  % * / + - == <= < != = > >= && || ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= && || ) 
logical_expression -> .! expression bool_expression  	,  ) 
expression -> .value operation  	,  && || ) 
factor -> .id  	,  % * / + - == <= < != = > >= && || ) 
value -> .item value'  	,  == <= < != = > >= && || ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= && || ) 
factor -> .const  	,  % * / + - == <= < != = > >= && || ) 

I68
item ->  factor item'.  	,  + - == <= < != = > >= ; 

I69
init ->  [.const ]  	,  ; , 

I70
compare_op ->  >.  	,  const ( id 

I71
logical_expression -> .expression bool_expression  	,  ) 
item -> .factor item'  	,  + - == <= < != = > >= && || ) 
factor -> .id call_func  	,  % * / + - == <= < != = > >= && || ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= && || ) 
logical_expression -> .! expression bool_expression  	,  ) 
expression -> .value operation  	,  && || ) 
factor -> .id  	,  % * / + - == <= < != = > >= && || ) 
value -> .item value'  	,  == <= < != = > >= && || ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= && || ) 
iteration_stmt ->  while (.logical_expression ) block_stmt  	,  const break continue for ( do id while if return switch } 
factor -> .const  	,  % * / + - == <= < != = > >= && || ) 

I72
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; 
factor -> .id  	,  % * / + - == <= < != = > >= ; 
item -> .factor item'  	,  + - == <= < != = > >= ; 
value' ->  +.item value'  	,  == <= < != = > >= ; 
factor -> .const  	,  % * / + - == <= < != = > >= ; 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; 

I73
jump_stmt ->  break ;.  	,  const break continue for ( do id while if return switch } 

I74
compare_op ->  !=.  	,  const ( id 

I75
isnull_expr ->  expression.  	,  ; 

I76
equal_op ->  =.  	,  const ( id 

I77
jump_stmt ->  continue ;.  	,  const break continue for ( do id while if return switch } 

I78
expression ->  value operation.  	,  ; 

I79
assign_stmt ->  expression ;.  	,  const break continue for ( do id while if return switch } 

I80
iteration_stmt ->  do block_stmt.while ( logical_expression ) ;  	,  const break continue for ( do id while if return switch } 

I81
factor ->  id.[ const ]  	,  % * / + - ) 
factor ->  id.call_func  	,  % * / + - ) 
factor ->  id.  	,  % * / + - ) 
call_func -> .( es )  	,  % * / + - ) 

I82
value ->  item value'.  	,  == <= < != = > >= ; 

I83
compare_op ->  ==.  	,  const ( id 

I84
expression -> .value operation  	,  , ) 
item -> .factor item'  	,  + - == <= < != = > >= , ) 
factor -> .const  	,  % * / + - == <= < != = > >= , ) 
call_func ->  (.es )  	,  % * / + - == <= < != = > >= ; 
factor -> .id call_func  	,  % * / + - == <= < != = > >= , ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= , ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= , ) 
factor -> .id  	,  % * / + - == <= < != = > >= , ) 
es -> .expression eps  	,  ) 
value -> .item value'  	,  == <= < != = > >= , ) 

I85
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; 
stmts -> .  	,  } 
stmt -> .jump_stmt  	,  const break continue for ( do id while if return switch } 
branch_stmt -> .if ( logical_expression ) block_stmt result  	,  const break continue for ( do id while if return switch } 
factor -> .id  	,  % * / + - == <= < != = > >= ; 
expression -> .value operation  	,  ; 
iteration_stmt -> .while ( logical_expression ) block_stmt  	,  const break continue for ( do id while if return switch } 
stmts -> .stmt stmts  	,  } 
jump_stmt -> .return isnull_expr ;  	,  const break continue for ( do id while if return switch } 
block_stmt ->  {.stmts }  	,  while 
iteration_stmt -> .do block_stmt while ( logical_expression ) ;  	,  const break continue for ( do id while if return switch } 
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; 
stmt -> .iteration_stmt  	,  const break continue for ( do id while if return switch } 
iteration_stmt -> .for ( isnull_expr ; isnull_expr ; isnull_expr ) block_stmt  	,  const break continue for ( do id while if return switch } 
stmt -> .branch_stmt  	,  const break continue for ( do id while if return switch } 
stmt -> .assign_stmt  	,  const break continue for ( do id while if return switch } 
jump_stmt -> .break ;  	,  const break continue for ( do id while if return switch } 
item -> .factor item'  	,  + - == <= < != = > >= ; 
assign_stmt -> .expression ;  	,  const break continue for ( do id while if return switch } 
jump_stmt -> .continue ;  	,  const break continue for ( do id while if return switch } 
factor -> .const  	,  % * / + - == <= < != = > >= ; 
branch_stmt -> .switch ( id ) { case_stmt case_stmts default_stmt }  	,  const break continue for ( do id while if return switch } 
value -> .item value'  	,  == <= < != = > >= ; 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; 

I86
vars -> .  	,  ; 
vars -> ., id init vars  	,  ; 
define_stmt ->  type id init.vars ;  	,  boolean void double record char short unsigned float int long const break continue for ( do id while if } return switch 

I87
stmts ->  stmt stmts.  	,  } 

I88
item' -> .* factor item'  	,  + - ) 
item' -> .  	,  + - ) 
item' -> .% factor item'  	,  + - ) 
item' -> ./ factor item'  	,  + - ) 
item ->  factor.item'  	,  + - ) 

I89
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; 
factor -> .id  	,  % * / + - == <= < != = > >= ; 
item' ->  %.factor item'  	,  + - == <= < != = > >= ; 
factor -> .const  	,  % * / + - == <= < != = > >= ; 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; 

I90
compare_op ->  >=.  	,  const ( id 

I91
factor ->  const.  	,  % * / + - ) 

I92
expression -> .value operation  	,  ; , 
factor -> .const  	,  % * / + - == <= < != = > >= ; , 
item -> .factor item'  	,  + - == <= < != = > >= ; , 
factor -> .id  	,  % * / + - == <= < != = > >= ; , 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; , 
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; , 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; , 
value -> .item value'  	,  == <= < != = > >= ; , 
init ->  =.expression  	,  ; , 

I93
value -> .item value'  	,  ) 
item -> .factor item'  	,  + - ) 
factor -> .const  	,  % * / + - ) 
factor -> .id call_func  	,  % * / + - ) 
factor -> .id [ const ]  	,  % * / + - ) 
factor -> .( value )  	,  % * / + - ) 
factor ->  (.value )  	,  % * / + - ) 
factor -> .id  	,  % * / + - ) 

I94
value -> .item value'  	,  ; 
item -> .factor item'  	,  + - ; 
factor -> .const  	,  % * / + - ; 
factor -> .id call_func  	,  % * / + - ; 
factor -> .id [ const ]  	,  % * / + - ; 
factor -> .( value )  	,  % * / + - ; 
factor -> .id  	,  % * / + - ; 
operation ->  compare_op.value  	,  ; 

I95
arg ->  , type id arg.  	,  ) 

I96
isnull_expr -> .expression  	,  ; 
iteration_stmt ->  for (.isnull_expr ; isnull_expr ; isnull_expr ) block_stmt  	,  const break continue for ( do id while if return switch } 
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; 
isnull_expr -> .  	,  ; 
factor -> .id  	,  % * / + - == <= < != = > >= ; 
expression -> .value operation  	,  ; 
item -> .factor item'  	,  + - == <= < != = > >= ; 
factor -> .const  	,  % * / + - == <= < != = > >= ; 
value -> .item value'  	,  == <= < != = > >= ; 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; 

I97
compare_op ->  <.  	,  const ( id 

I98
jump_stmt ->  return isnull_expr.;  	,  const break continue for ( do id while if return switch } 

I99
value -> .item value'  	,  ; 
item -> .factor item'  	,  + - ; 
factor -> .const  	,  % * / + - ; 
factor -> .id call_func  	,  % * / + - ; 
factor -> .id [ const ]  	,  % * / + - ; 
factor -> .( value )  	,  % * / + - ; 
operation ->  equal_op.value  	,  ; 
factor -> .id  	,  % * / + - ; 

I100
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; 
factor -> .id  	,  % * / + - == <= < != = > >= ; 
item' ->  *.factor item'  	,  + - == <= < != = > >= ; 
factor -> .const  	,  % * / + - == <= < != = > >= ; 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; 

I101
factor ->  id [ const.]  	,  % * / + - == <= < != = > >= ; 

I102
operation ->  equal_op value.  	,  ; 

I103
item' -> .% factor item'  	,  + - == <= < != = > >= ; 
item' -> .* factor item'  	,  + - == <= < != = > >= ; 
item' -> .  	,  + - == <= < != = > >= ; 
item' ->  / factor.item'  	,  + - == <= < != = > >= ; 
item' -> ./ factor item'  	,  + - == <= < != = > >= ; 

I104
compare_op -> .<=  	,  const ( id 
expression ->  value.operation  	,  && || ) 
compare_op -> .>  	,  const ( id 
equal_op -> .=  	,  const ( id 
compare_op -> .>=  	,  const ( id 
compare_op -> .<  	,  const ( id 
compare_op -> .==  	,  const ( id 
operation -> .equal_op value  	,  && || ) 
operation -> .  	,  && || ) 
compare_op -> .!=  	,  const ( id 
operation -> .compare_op value  	,  && || ) 

I105
eps -> .  	,  ) 
eps -> ., expression eps  	,  ) 
es ->  expression.eps  	,  ) 

I106
operation ->  compare_op value.  	,  ; 

I107
branch_stmt ->  switch ( id.) { case_stmt case_stmts default_stmt }  	,  const break continue for ( do id while if return switch } 

I108
item' -> .* factor item'  	,  + - == <= < != = > >= , ) 
item ->  factor.item'  	,  + - == <= < != = > >= , ) 
item' -> .% factor item'  	,  + - == <= < != = > >= , ) 
item' -> .  	,  + - == <= < != = > >= , ) 
item' -> ./ factor item'  	,  + - == <= < != = > >= , ) 

I109
value' -> .+ item value'  	,  == <= < != = > >= ; 
value' -> .- item value'  	,  == <= < != = > >= ; 
value' ->  - item.value'  	,  == <= < != = > >= ; 
value' -> .  	,  == <= < != = > >= ; 

I110
expression -> .value operation  	,  , ) 
item -> .factor item'  	,  + - == <= < != = > >= , ) 
factor -> .const  	,  % * / + - == <= < != = > >= , ) 
call_func ->  (.es )  	,  % * / + - ) 
factor -> .id call_func  	,  % * / + - == <= < != = > >= , ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= , ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= , ) 
factor -> .id  	,  % * / + - == <= < != = > >= , ) 
es -> .expression eps  	,  ) 
value -> .item value'  	,  == <= < != = > >= , ) 

I111
value -> .item value'  	,  ) 
item -> .factor item'  	,  + - ) 
factor -> .const  	,  % * / + - ) 
factor -> .id call_func  	,  % * / + - ) 
factor -> .id [ const ]  	,  % * / + - ) 
factor ->  (.value )  	,  % * / + - == <= < != = > >= ; , 
factor -> .( value )  	,  % * / + - ) 
factor -> .id  	,  % * / + - ) 

I112
item -> .factor item'  	,  + - == <= < != = > >= && || ) 
factor -> .id call_func  	,  % * / + - == <= < != = > >= && || ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= && || ) 
logical_expression ->  !.expression bool_expression  	,  ) 
expression -> .value operation  	,  && || ) 
factor -> .id  	,  % * / + - == <= < != = > >= && || ) 
value -> .item value'  	,  == <= < != = > >= && || ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= && || ) 
factor -> .const  	,  % * / + - == <= < != = > >= && || ) 

I113
value -> .item value'  	,  ) 
item -> .factor item'  	,  + - ) 
factor -> .const  	,  % * / + - ) 
factor -> .id call_func  	,  % * / + - ) 
factor -> .id [ const ]  	,  % * / + - ) 
factor -> .( value )  	,  % * / + - ) 
factor ->  (.value )  	,  % * / + - == <= < != = > >= , ) 
factor -> .id  	,  % * / + - ) 

I114
factor ->  id.[ const ]  	,  % * / + - ; 
factor ->  id.call_func  	,  % * / + - ; 
factor ->  id.  	,  % * / + - ; 
call_func -> .( es )  	,  % * / + - ; 

I115
compare_op -> .<=  	,  const ( id 
compare_op -> .>  	,  const ( id 
operation -> .  	,  , ) 
equal_op -> .=  	,  const ( id 
operation -> .compare_op value  	,  , ) 
compare_op -> .>=  	,  const ( id 
compare_op -> .<  	,  const ( id 
compare_op -> .==  	,  const ( id 
compare_op -> .!=  	,  const ( id 
operation -> .equal_op value  	,  , ) 
expression ->  value.operation  	,  , ) 

I116
factor ->  id [.const ]  	,  % * / + - ) 

I117
item' -> .% factor item'  	,  + - == <= < != = > >= ; 
item' -> .* factor item'  	,  + - == <= < != = > >= ; 
item' -> .  	,  + - == <= < != = > >= ; 
item' ->  * factor.item'  	,  + - == <= < != = > >= ; 
item' -> ./ factor item'  	,  + - == <= < != = > >= ; 

I118
value' -> .+ item value'  	,  == <= < != = > >= ; 
value' -> .- item value'  	,  == <= < != = > >= ; 
value' ->  + item.value'  	,  == <= < != = > >= ; 
value' -> .  	,  == <= < != = > >= ; 

I119
factor -> .const  	,  % * / + - ) 
item' ->  /.factor item'  	,  + - ) 
factor -> .id call_func  	,  % * / + - ) 
factor -> .id [ const ]  	,  % * / + - ) 
factor -> .( value )  	,  % * / + - ) 
factor -> .id  	,  % * / + - ) 

I120
call_func -> .( es )  	,  % * / + - == <= < != = > >= , ) 
factor ->  id.call_func  	,  % * / + - == <= < != = > >= , ) 
factor ->  id.[ const ]  	,  % * / + - == <= < != = > >= , ) 
factor ->  id.  	,  % * / + - == <= < != = > >= , ) 

I121
factor ->  const.  	,  % * / + - == <= < != = > >= ; , 

I122
item ->  factor.item'  	,  + - == <= < != = > >= && || ) 
item' -> ./ factor item'  	,  + - == <= < != = > >= && || ) 
item' -> .* factor item'  	,  + - == <= < != = > >= && || ) 
item' -> .% factor item'  	,  + - == <= < != = > >= && || ) 
item' -> .  	,  + - == <= < != = > >= && || ) 

I123
branch_stmt ->  if ( logical_expression.) block_stmt result  	,  const break continue for ( do id while if return switch } 

I124
value -> .item value'  	,  ) 
item -> .factor item'  	,  + - ) 
factor -> .const  	,  % * / + - ) 
factor -> .id call_func  	,  % * / + - ) 
factor -> .id [ const ]  	,  % * / + - ) 
factor ->  (.value )  	,  % * / + - == <= < != = > >= && || ) 
factor -> .( value )  	,  % * / + - ) 
factor -> .id  	,  % * / + - ) 

I125
item' -> .% factor item'  	,  + - == <= < != = > >= ; 
item' -> .* factor item'  	,  + - == <= < != = > >= ; 
item' -> .  	,  + - == <= < != = > >= ; 
item' ->  % factor.item'  	,  + - == <= < != = > >= ; 
item' -> ./ factor item'  	,  + - == <= < != = > >= ; 

I126
item ->  factor item'.  	,  + - ) 

I127
value ->  item value'.  	,  ) 

I128
value' ->  +.item value'  	,  ) 
item -> .factor item'  	,  + - ) 
factor -> .const  	,  % * / + - ) 
factor -> .id call_func  	,  % * / + - ) 
factor -> .id [ const ]  	,  % * / + - ) 
factor -> .( value )  	,  % * / + - ) 
factor -> .id  	,  % * / + - ) 

I129
vars ->  ,.id init vars  	,  ; 

I130
factor ->  ( value.)  	,  % * / + - ) 

I131
factor ->  const.  	,  % * / + - ; 

I132
value' -> .  	,  == <= < != = > >= && || ) 
value' -> .+ item value'  	,  == <= < != = > >= && || ) 
value' -> .- item value'  	,  == <= < != = > >= && || ) 
value ->  item.value'  	,  == <= < != = > >= && || ) 

I133
jump_stmt ->  return isnull_expr ;.  	,  const break continue for ( do id while if return switch } 

I134
call_func -> .( es )  	,  % * / + - == <= < != = > >= ; , 
factor ->  id.call_func  	,  % * / + - == <= < != = > >= ; , 
factor ->  id.[ const ]  	,  % * / + - == <= < != = > >= ; , 
factor ->  id.  	,  % * / + - == <= < != = > >= ; , 

I135
value -> .item value'  	,  ) 
item -> .factor item'  	,  + - ) 
factor -> .const  	,  % * / + - ) 
factor -> .id call_func  	,  % * / + - ) 
factor -> .id [ const ]  	,  % * / + - ) 
factor -> .( value )  	,  % * / + - ) 
factor ->  (.value )  	,  % * / + - ; 
factor -> .id  	,  % * / + - ) 

I136
factor ->  id call_func.  	,  % * / + - ) 

I137
init ->  [ const.]  	,  ; , 

I138
value' -> .+ item value'  	,  == <= < != = > >= , ) 
value ->  item.value'  	,  == <= < != = > >= , ) 
value' -> .  	,  == <= < != = > >= , ) 
value' -> .- item value'  	,  == <= < != = > >= , ) 

I139
factor ->  const.  	,  % * / + - == <= < != = > >= && || ) 

I140
item' ->  *.factor item'  	,  + - ) 
factor -> .const  	,  % * / + - ) 
factor -> .id call_func  	,  % * / + - ) 
factor -> .id [ const ]  	,  % * / + - ) 
factor -> .( value )  	,  % * / + - ) 
factor -> .id  	,  % * / + - ) 

I141
iteration_stmt ->  do block_stmt while.( logical_expression ) ;  	,  const break continue for ( do id while if return switch } 

I142
item -> .factor item'  	,  + - ) 
factor -> .const  	,  % * / + - ) 
factor -> .id call_func  	,  % * / + - ) 
factor -> .id [ const ]  	,  % * / + - ) 
value' ->  -.item value'  	,  ) 
factor -> .( value )  	,  % * / + - ) 
factor -> .id  	,  % * / + - ) 

I143
operation -> .  	,  ; , 
expression ->  value.operation  	,  ; , 
compare_op -> .<=  	,  const ( id 
compare_op -> .>  	,  const ( id 
equal_op -> .=  	,  const ( id 
compare_op -> .>=  	,  const ( id 
operation -> .compare_op value  	,  ; , 
compare_op -> .<  	,  const ( id 
compare_op -> .==  	,  const ( id 
compare_op -> .!=  	,  const ( id 
operation -> .equal_op value  	,  ; , 

I144
factor ->  const.  	,  % * / + - == <= < != = > >= , ) 

I145
lop -> .&&  	,  const ( id 
bool_expression -> .  	,  ) 
logical_expression ->  expression.bool_expression  	,  ) 
bool_expression -> .lop expression bool_expression  	,  ) 
lop -> .||  	,  const ( id 

I146
value' -> .+ item value'  	,  == <= < != = > >= ; , 
value' -> .- item value'  	,  == <= < != = > >= ; , 
value' -> .  	,  == <= < != = > >= ; , 
value ->  item.value'  	,  == <= < != = > >= ; , 

I147
iteration_stmt ->  while ( logical_expression.) block_stmt  	,  const break continue for ( do id while if return switch } 

I148
item' ->  %.factor item'  	,  + - ) 
factor -> .const  	,  % * / + - ) 
factor -> .id call_func  	,  % * / + - ) 
factor -> .id [ const ]  	,  % * / + - ) 
factor -> .( value )  	,  % * / + - ) 
factor -> .id  	,  % * / + - ) 

I149
item' -> ./ factor item'  	,  + - == <= < != = > >= ; , 
item ->  factor.item'  	,  + - == <= < != = > >= ; , 
item' -> .* factor item'  	,  + - == <= < != = > >= ; , 
item' -> .  	,  + - == <= < != = > >= ; , 
item' -> .% factor item'  	,  + - == <= < != = > >= ; , 

I150
iteration_stmt ->  for ( isnull_expr.; isnull_expr ; isnull_expr ) block_stmt  	,  const break continue for ( do id while if return switch } 

I151
block_stmt ->  { stmts.}  	,  while 

I152
item' -> .* factor item'  	,  + - ; 
item' -> .  	,  + - ; 
item' -> .% factor item'  	,  + - ; 
item' -> ./ factor item'  	,  + - ; 
item ->  factor.item'  	,  + - ; 

I153
value' -> .  	,  ; 
value' -> .+ item value'  	,  ; 
value ->  item.value'  	,  ; 
value' -> .- item value'  	,  ; 

I154
init ->  = expression.  	,  ; , 

I155
call_func ->  ( es.)  	,  % * / + - == <= < != = > >= ; 

I156
define_stmt ->  type id init vars.;  	,  boolean void double record char short unsigned float int long const break continue for ( do id while if } return switch 

I157
factor ->  id.call_func  	,  % * / + - == <= < != = > >= && || ) 
factor ->  id.[ const ]  	,  % * / + - == <= < != = > >= && || ) 
factor ->  id.  	,  % * / + - == <= < != = > >= && || ) 
call_func -> .( es )  	,  % * / + - == <= < != = > >= && || ) 

I158
factor ->  ( value ).  	,  % * / + - == <= < != = > >= ; 

I159
factor -> .const  	,  % * / + - == <= < != = > >= ; , 
factor -> .id  	,  % * / + - == <= < != = > >= ; , 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; , 
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; , 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; , 
item' ->  /.factor item'  	,  + - == <= < != = > >= ; , 

I160
item -> .factor item'  	,  + - == <= < != = > >= && || ) 
factor -> .id call_func  	,  % * / + - == <= < != = > >= && || ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= && || ) 
value' ->  +.item value'  	,  == <= < != = > >= && || ) 
factor -> .id  	,  % * / + - == <= < != = > >= && || ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= && || ) 
factor -> .const  	,  % * / + - == <= < != = > >= && || ) 

I161
call_func ->  ( es ).  	,  % * / + - == <= < != = > >= ; 

I162
lop ->  &&.  	,  const ( id 

I163
es ->  expression eps.  	,  ) 

I164
factor ->  ( value.)  	,  % * / + - == <= < != = > >= && || ) 

I165
factor ->  ( value.)  	,  % * / + - == <= < != = > >= , ) 

I166
block_stmt -> .{ stmts }  	,  else const break continue for ( do id while if return switch } 
branch_stmt ->  if ( logical_expression ).block_stmt result  	,  const break continue for ( do id while if return switch } 

I167
value' -> .  	,  ) 
value' -> .+ item value'  	,  ) 
value' ->  + item.value'  	,  ) 
value' -> .- item value'  	,  ) 

I168
factor ->  id [ const ].  	,  % * / + - == <= < != = > >= ; 

I169
item' ->  %.factor item'  	,  + - == <= < != = > >= && || ) 
factor -> .id call_func  	,  % * / + - == <= < != = > >= && || ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= && || ) 
factor -> .id  	,  % * / + - == <= < != = > >= && || ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= && || ) 
factor -> .const  	,  % * / + - == <= < != = > >= && || ) 

I170
item' ->  /.factor item'  	,  + - == <= < != = > >= && || ) 
factor -> .id call_func  	,  % * / + - == <= < != = > >= && || ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= && || ) 
factor -> .id  	,  % * / + - == <= < != = > >= && || ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= && || ) 
factor -> .const  	,  % * / + - == <= < != = > >= && || ) 

I171
logical_expression -> .expression bool_expression  	,  ) 
item -> .factor item'  	,  + - == <= < != = > >= && || ) 
factor -> .id call_func  	,  % * / + - == <= < != = > >= && || ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= && || ) 
logical_expression -> .! expression bool_expression  	,  ) 
iteration_stmt ->  do block_stmt while (.logical_expression ) ;  	,  const break continue for ( do id while if return switch } 
expression -> .value operation  	,  && || ) 
factor -> .id  	,  % * / + - == <= < != = > >= && || ) 
value -> .item value'  	,  == <= < != = > >= && || ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= && || ) 
factor -> .const  	,  % * / + - == <= < != = > >= && || ) 

I172
vars ->  , id.init vars  	,  ; 
init -> .  	,  , ; 
init -> .[ const ]  	,  , ; 
init -> .= expression  	,  , ; 

I173
value ->  item value'.  	,  == <= < != = > >= && || ) 

I174
factor -> .const  	,  % * / + - ; 
item' ->  /.factor item'  	,  + - ; 
factor -> .id call_func  	,  % * / + - ; 
factor -> .id [ const ]  	,  % * / + - ; 
factor -> .( value )  	,  % * / + - ; 
factor -> .id  	,  % * / + - ; 

I175
init ->  [ const ].  	,  ; , 

I176
item' ->  % factor.item'  	,  + - ) 
item' -> .* factor item'  	,  + - ) 
item' -> .  	,  + - ) 
item' -> .% factor item'  	,  + - ) 
item' -> ./ factor item'  	,  + - ) 

I177
logical_expression ->  expression bool_expression.  	,  ) 

I178
item -> .factor item'  	,  + - == <= < != = > >= && || ) 
factor -> .id call_func  	,  % * / + - == <= < != = > >= && || ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= && || ) 
bool_expression ->  lop.expression bool_expression  	,  ) 
expression -> .value operation  	,  && || ) 
factor -> .id  	,  % * / + - == <= < != = > >= && || ) 
value -> .item value'  	,  == <= < != = > >= && || ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= && || ) 
factor -> .const  	,  % * / + - == <= < != = > >= && || ) 

I179
factor ->  ( value.)  	,  % * / + - == <= < != = > >= ; , 

I180
factor -> .const  	,  % * / + - , ) 
item -> .factor item'  	,  + - , ) 
operation ->  compare_op.value  	,  , ) 
factor -> .id call_func  	,  % * / + - , ) 
factor -> .id [ const ]  	,  % * / + - , ) 
factor -> .id  	,  % * / + - , ) 
factor -> .( value )  	,  % * / + - , ) 
value -> .item value'  	,  , ) 

I181
expression -> .value operation  	,  , ) 
item -> .factor item'  	,  + - == <= < != = > >= , ) 
factor -> .const  	,  % * / + - == <= < != = > >= , ) 
call_func ->  (.es )  	,  % * / + - == <= < != = > >= , ) 
factor -> .id call_func  	,  % * / + - == <= < != = > >= , ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= , ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= , ) 
factor -> .id  	,  % * / + - == <= < != = > >= , ) 
es -> .expression eps  	,  ) 
value -> .item value'  	,  == <= < != = > >= , ) 

I182
lop ->  ||.  	,  const ( id 

I183
factor -> .const  	,  % * / + - ; , 
factor -> .id [ const ]  	,  % * / + - ; , 
factor -> .id  	,  % * / + - ; , 
factor -> .( value )  	,  % * / + - ; , 
operation ->  compare_op.value  	,  ; , 
factor -> .id call_func  	,  % * / + - ; , 
value -> .item value'  	,  ; , 
item -> .factor item'  	,  + - ; , 

I184
value' -> .  	,  ) 
value' -> .+ item value'  	,  ) 
value' -> .- item value'  	,  ) 
value' ->  - item.value'  	,  ) 

I185
factor -> .const  	,  % * / + - == <= < != = > >= ; , 
item -> .factor item'  	,  + - == <= < != = > >= ; , 
factor -> .id  	,  % * / + - == <= < != = > >= ; , 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; , 
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; , 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; , 
value' ->  -.item value'  	,  == <= < != = > >= ; , 

I186
item' ->  %.factor item'  	,  + - ; 
factor -> .const  	,  % * / + - ; 
factor -> .id call_func  	,  % * / + - ; 
factor -> .id [ const ]  	,  % * / + - ; 
factor -> .( value )  	,  % * / + - ; 
factor -> .id  	,  % * / + - ; 

I187
item' ->  *.factor item'  	,  + - ; 
factor -> .const  	,  % * / + - ; 
factor -> .id call_func  	,  % * / + - ; 
factor -> .id [ const ]  	,  % * / + - ; 
factor -> .( value )  	,  % * / + - ; 
factor -> .id  	,  % * / + - ; 

I188
value ->  item value'.  	,  == <= < != = > >= , ) 

I189
branch_stmt ->  switch ( id ).{ case_stmt case_stmts default_stmt }  	,  const break continue for ( do id while if return switch } 

I190
value' ->  + item value'.  	,  == <= < != = > >= ; 

I191
item ->  factor item'.  	,  + - ; 

I192
factor ->  ( value ).  	,  % * / + - ) 

I193
factor ->  id call_func.  	,  % * / + - ; 

I194
item ->  factor item'.  	,  + - == <= < != = > >= , ) 

I195
value -> .item value'  	,  && || ) 
item -> .factor item'  	,  + - && || ) 
factor -> .id call_func  	,  % * / + - && || ) 
factor -> .id [ const ]  	,  % * / + - && || ) 
factor -> .id  	,  % * / + - && || ) 
factor -> .( value )  	,  % * / + - && || ) 
factor -> .const  	,  % * / + - && || ) 
operation ->  compare_op.value  	,  && || ) 

I196
item' -> .* factor item'  	,  + - ) 
item' -> .  	,  + - ) 
item' ->  * factor.item'  	,  + - ) 
item' -> .% factor item'  	,  + - ) 
item' -> ./ factor item'  	,  + - ) 

I197
factor ->  id call_func.  	,  % * / + - == <= < != = > >= && || ) 

I198
item ->  factor item'.  	,  + - == <= < != = > >= ; , 

I199
factor ->  id [ const.]  	,  % * / + - ) 

I200
factor -> .const  	,  % * / + - == <= < != = > >= ; , 
item' ->  %.factor item'  	,  + - == <= < != = > >= ; , 
factor -> .id  	,  % * / + - == <= < != = > >= ; , 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; , 
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; , 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; , 

I201
block_stmt ->  { stmts }.  	,  while 

I202
factor ->  ( value.)  	,  % * / + - ; 

I203
value -> .item value'  	,  && || ) 
item -> .factor item'  	,  + - && || ) 
factor -> .id call_func  	,  % * / + - && || ) 
factor -> .id [ const ]  	,  % * / + - && || ) 
factor -> .id  	,  % * / + - && || ) 
operation ->  equal_op.value  	,  && || ) 
factor -> .( value )  	,  % * / + - && || ) 
factor -> .const  	,  % * / + - && || ) 

I204
value' ->  +.item value'  	,  ; 
item -> .factor item'  	,  + - ; 
factor -> .const  	,  % * / + - ; 
factor -> .id call_func  	,  % * / + - ; 
factor -> .id [ const ]  	,  % * / + - ; 
factor -> .( value )  	,  % * / + - ; 
factor -> .id  	,  % * / + - ; 

I205
factor -> .const  	,  % * / + - == <= < != = > >= , ) 
factor -> .id call_func  	,  % * / + - == <= < != = > >= , ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= , ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= , ) 
factor -> .id  	,  % * / + - == <= < != = > >= , ) 
item' ->  /.factor item'  	,  + - == <= < != = > >= , ) 

I206
factor -> .const  	,  % * / + - == <= < != = > >= ; , 
item -> .factor item'  	,  + - == <= < != = > >= ; , 
value' ->  +.item value'  	,  == <= < != = > >= ; , 
factor -> .id  	,  % * / + - == <= < != = > >= ; , 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; , 
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; , 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; , 

I207
factor -> .const  	,  % * / + - == <= < != = > >= , ) 
item' ->  %.factor item'  	,  + - == <= < != = > >= , ) 
factor -> .id call_func  	,  % * / + - == <= < != = > >= , ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= , ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= , ) 
factor -> .id  	,  % * / + - == <= < != = > >= , ) 

I208
expression -> .value operation  	,  , ) 
item -> .factor item'  	,  + - == <= < != = > >= , ) 
factor -> .const  	,  % * / + - == <= < != = > >= , ) 
factor -> .id call_func  	,  % * / + - == <= < != = > >= , ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= , ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= , ) 
call_func ->  (.es )  	,  % * / + - == <= < != = > >= && || ) 
factor -> .id  	,  % * / + - == <= < != = > >= , ) 
es -> .expression eps  	,  ) 
value -> .item value'  	,  == <= < != = > >= , ) 

I209
factor ->  id [.const ]  	,  % * / + - ; 

I210
item ->  factor item'.  	,  + - == <= < != = > >= && || ) 

I211
factor -> .const  	,  % * / + - ; , 
factor -> .id [ const ]  	,  % * / + - ; , 
factor -> .id  	,  % * / + - ; , 
factor -> .( value )  	,  % * / + - ; , 
factor -> .id call_func  	,  % * / + - ; , 
value -> .item value'  	,  ; , 
item -> .factor item'  	,  + - ; , 
operation ->  equal_op.value  	,  ; , 

I212
item' ->  / factor item'.  	,  + - == <= < != = > >= ; 

I213
factor -> .id call_func  	,  % * / + - == <= < != = > >= && || ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= && || ) 
item' ->  *.factor item'  	,  + - == <= < != = > >= && || ) 
factor -> .id  	,  % * / + - == <= < != = > >= && || ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= && || ) 
factor -> .const  	,  % * / + - == <= < != = > >= && || ) 

I214
item -> .factor item'  	,  + - == <= < != = > >= && || ) 
factor -> .id call_func  	,  % * / + - == <= < != = > >= && || ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= && || ) 
factor -> .id  	,  % * / + - == <= < != = > >= && || ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= && || ) 
value' ->  -.item value'  	,  == <= < != = > >= && || ) 
factor -> .const  	,  % * / + - == <= < != = > >= && || ) 

I215
item -> .factor item'  	,  + - == <= < != = > >= , ) 
factor -> .const  	,  % * / + - == <= < != = > >= , ) 
value' ->  +.item value'  	,  == <= < != = > >= , ) 
factor -> .id call_func  	,  % * / + - == <= < != = > >= , ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= , ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= , ) 
factor -> .id  	,  % * / + - == <= < != = > >= , ) 

I216
value ->  item value'.  	,  == <= < != = > >= ; , 

I217
expression -> .value operation  	,  , ) 
item -> .factor item'  	,  + - == <= < != = > >= , ) 
factor -> .const  	,  % * / + - == <= < != = > >= , ) 
call_func ->  (.es )  	,  % * / + - ; 
factor -> .id call_func  	,  % * / + - == <= < != = > >= , ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= , ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= , ) 
factor -> .id  	,  % * / + - == <= < != = > >= , ) 
es -> .expression eps  	,  ) 
value -> .item value'  	,  == <= < != = > >= , ) 

I218
value ->  item value'.  	,  ; 

I219
expression ->  value operation.  	,  , ) 

I220
item' ->  *.factor item'  	,  + - == <= < != = > >= , ) 
factor -> .const  	,  % * / + - == <= < != = > >= , ) 
factor -> .id call_func  	,  % * / + - == <= < != = > >= , ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= , ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= , ) 
factor -> .id  	,  % * / + - == <= < != = > >= , ) 

I221
factor -> .const  	,  % * / + - , ) 
operation ->  equal_op.value  	,  , ) 
item -> .factor item'  	,  + - , ) 
factor -> .id call_func  	,  % * / + - , ) 
factor -> .id [ const ]  	,  % * / + - , ) 
factor -> .id  	,  % * / + - , ) 
factor -> .( value )  	,  % * / + - , ) 
value -> .item value'  	,  , ) 

I222
expression -> .value operation  	,  , ) 
item -> .factor item'  	,  + - == <= < != = > >= , ) 
factor -> .const  	,  % * / + - == <= < != = > >= , ) 
call_func ->  (.es )  	,  % * / + - == <= < != = > >= ; , 
factor -> .id call_func  	,  % * / + - == <= < != = > >= , ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= , ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= , ) 
factor -> .id  	,  % * / + - == <= < != = > >= , ) 
es -> .expression eps  	,  ) 
value -> .item value'  	,  == <= < != = > >= , ) 

I223
item -> .factor item'  	,  + - ; 
factor -> .const  	,  % * / + - ; 
factor -> .id call_func  	,  % * / + - ; 
factor -> .id [ const ]  	,  % * / + - ; 
value' ->  -.item value'  	,  ; 
factor -> .( value )  	,  % * / + - ; 
factor -> .id  	,  % * / + - ; 

I224
item -> .factor item'  	,  + - == <= < != = > >= , ) 
factor -> .const  	,  % * / + - == <= < != = > >= , ) 
factor -> .id call_func  	,  % * / + - == <= < != = > >= , ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= , ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= , ) 
factor -> .id  	,  % * / + - == <= < != = > >= , ) 
value' ->  -.item value'  	,  == <= < != = > >= , ) 

I225
expression ->  value operation.  	,  ; , 

I226
call_func ->  ( es.)  	,  % * / + - ) 

I227
isnull_expr -> .expression  	,  ; 
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; 
isnull_expr -> .  	,  ; 
factor -> .id  	,  % * / + - == <= < != = > >= ; 
iteration_stmt ->  for ( isnull_expr ;.isnull_expr ; isnull_expr ) block_stmt  	,  const break continue for ( do id while if return switch } 
expression -> .value operation  	,  ; 
item -> .factor item'  	,  + - == <= < != = > >= ; 
factor -> .const  	,  % * / + - == <= < != = > >= ; 
value -> .item value'  	,  == <= < != = > >= ; 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; 

I228
factor ->  id [.const ]  	,  % * / + - == <= < != = > >= , ) 

I229
factor ->  id [.const ]  	,  % * / + - == <= < != = > >= ; , 

I230
expression -> .value operation  	,  , ) 
item -> .factor item'  	,  + - == <= < != = > >= , ) 
factor -> .const  	,  % * / + - == <= < != = > >= , ) 
factor -> .id call_func  	,  % * / + - == <= < != = > >= , ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= , ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= , ) 
factor -> .id  	,  % * / + - == <= < != = > >= , ) 
value -> .item value'  	,  == <= < != = > >= , ) 
eps ->  ,.expression eps  	,  ) 

I231
iteration_stmt ->  while ( logical_expression ).block_stmt  	,  const break continue for ( do id while if return switch } 
block_stmt -> .{ stmts }  	,  const break continue for ( do id while if return switch } 

I232
expression ->  value operation.  	,  && || ) 

I233
item' ->  * factor item'.  	,  + - == <= < != = > >= ; 

I234
value' ->  - item value'.  	,  == <= < != = > >= ; 

I235
item' ->  % factor item'.  	,  + - == <= < != = > >= ; 

I236
factor ->  id call_func.  	,  % * / + - == <= < != = > >= ; , 

I237
item' -> .* factor item'  	,  + - ) 
item' -> .  	,  + - ) 
item' -> .% factor item'  	,  + - ) 
item' -> ./ factor item'  	,  + - ) 
item' ->  / factor.item'  	,  + - ) 

I238
define_stmt ->  type id init vars ;.  	,  boolean void double record char short unsigned float int long const break continue for ( do id while if } return switch 

I239
factor ->  id [.const ]  	,  % * / + - == <= < != = > >= && || ) 

I240
item' ->  *.factor item'  	,  + - == <= < != = > >= ; , 
factor -> .const  	,  % * / + - == <= < != = > >= ; , 
factor -> .id  	,  % * / + - == <= < != = > >= ; , 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; , 
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; , 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; , 

I241
lop -> .&&  	,  const ( id 
bool_expression -> .  	,  ) 
logical_expression ->  ! expression.bool_expression  	,  ) 
bool_expression -> .lop expression bool_expression  	,  ) 
lop -> .||  	,  const ( id 

I242
factor ->  id call_func.  	,  % * / + - == <= < != = > >= , ) 

I243
value' -> .  	,  && || ) 
value' -> .+ item value'  	,  && || ) 
value ->  item.value'  	,  && || ) 
value' -> .- item value'  	,  && || ) 

I244
branch_stmt ->  switch ( id ) {.case_stmt case_stmts default_stmt }  	,  const break continue for ( do id while if return switch } 
case_stmt -> .case const : stmts  	,  default } case 

I245
item' -> ./ factor item'  	,  + - == <= < != = > >= ; , 
item' -> .* factor item'  	,  + - == <= < != = > >= ; , 
item' -> .  	,  + - == <= < != = > >= ; , 
item' -> .% factor item'  	,  + - == <= < != = > >= ; , 
item' ->  / factor.item'  	,  + - == <= < != = > >= ; , 

I246
item' -> .* factor item'  	,  + - ; 
item' -> .  	,  + - ; 
item' -> .% factor item'  	,  + - ; 
item' -> ./ factor item'  	,  + - ; 
item' ->  / factor.item'  	,  + - ; 

I247
call_func ->  ( es.)  	,  % * / + - == <= < != = > >= ; , 

I248
item' -> .* factor item'  	,  + - ; 
item' -> .  	,  + - ; 
item' ->  * factor.item'  	,  + - ; 
item' -> .% factor item'  	,  + - ; 
item' -> ./ factor item'  	,  + - ; 

I249
value' -> .+ item value'  	,  == <= < != = > >= ; , 
value' ->  + item.value'  	,  == <= < != = > >= ; , 
value' -> .- item value'  	,  == <= < != = > >= ; , 
value' -> .  	,  == <= < != = > >= ; , 

I250
factor ->  const.  	,  % * / + - ; , 

I251
call_func ->  ( es.)  	,  % * / + - == <= < != = > >= , ) 

I252
value' ->  + item value'.  	,  ) 

I253
iteration_stmt ->  for ( isnull_expr ; isnull_expr.; isnull_expr ) block_stmt  	,  const break continue for ( do id while if return switch } 

I254
factor ->  id.[ const ]  	,  % * / + - ; , 
call_func -> .( es )  	,  % * / + - ; , 
factor ->  id.call_func  	,  % * / + - ; , 
factor ->  id.  	,  % * / + - ; , 

I255
factor ->  id [ const ].  	,  % * / + - ) 

I256
value' -> .  	,  == <= < != = > >= && || ) 
value' -> .+ item value'  	,  == <= < != = > >= && || ) 
value' -> .- item value'  	,  == <= < != = > >= && || ) 
value' ->  - item.value'  	,  == <= < != = > >= && || ) 

I257
value -> .item value'  	,  ) 
item -> .factor item'  	,  + - ) 
factor -> .const  	,  % * / + - ) 
factor -> .id call_func  	,  % * / + - ) 
factor -> .id [ const ]  	,  % * / + - ) 
factor ->  (.value )  	,  % * / + - , ) 
factor -> .( value )  	,  % * / + - ) 
factor -> .id  	,  % * / + - ) 

I258
vars -> .  	,  ; 
vars ->  , id init.vars  	,  ; 
vars -> ., id init vars  	,  ; 

I259
operation ->  equal_op value.  	,  && || ) 

I260
iteration_stmt ->  while ( logical_expression ) block_stmt.  	,  const break continue for ( do id while if return switch } 

I261
value' ->  - item value'.  	,  ) 

I262
value' -> .  	,  ; 
value' -> .+ item value'  	,  ; 
value' -> .- item value'  	,  ; 
value' ->  - item.value'  	,  ; 

I263
logical_expression ->  ! expression bool_expression.  	,  ) 

I264
item' -> .* factor item'  	,  + - && || ) 
item' -> ./ factor item'  	,  + - && || ) 
item' -> .  	,  + - && || ) 
item' -> .% factor item'  	,  + - && || ) 
item ->  factor.item'  	,  + - && || ) 

I265
value' -> .+ item value'  	,  == <= < != = > >= , ) 
value' ->  - item.value'  	,  == <= < != = > >= , ) 
value' -> .  	,  == <= < != = > >= , ) 
value' -> .- item value'  	,  == <= < != = > >= , ) 

I266
factor ->  ( value ).  	,  % * / + - == <= < != = > >= ; , 

I267
value' -> .+ item value'  	,  == <= < != = > >= ; , 
value' -> .- item value'  	,  == <= < != = > >= ; , 
value' -> .  	,  == <= < != = > >= ; , 
value' ->  - item.value'  	,  == <= < != = > >= ; , 

I268
item' -> .* factor item'  	,  + - == <= < != = > >= , ) 
item' -> .% factor item'  	,  + - == <= < != = > >= , ) 
item' -> .  	,  + - == <= < != = > >= , ) 
item' -> ./ factor item'  	,  + - == <= < != = > >= , ) 
item' ->  * factor.item'  	,  + - == <= < != = > >= , ) 

I269
factor ->  ( value ).  	,  % * / + - == <= < != = > >= && || ) 

I270
item' -> ./ factor item'  	,  + - == <= < != = > >= && || ) 
item' ->  / factor.item'  	,  + - == <= < != = > >= && || ) 
item' -> .* factor item'  	,  + - == <= < != = > >= && || ) 
item' -> .% factor item'  	,  + - == <= < != = > >= && || ) 
item' -> .  	,  + - == <= < != = > >= && || ) 

I271
item' ->  % factor item'.  	,  + - ) 

I272
item' -> ./ factor item'  	,  + - == <= < != = > >= ; , 
item' -> .* factor item'  	,  + - == <= < != = > >= ; , 
item' ->  % factor.item'  	,  + - == <= < != = > >= ; , 
item' -> .  	,  + - == <= < != = > >= ; , 
item' -> .% factor item'  	,  + - == <= < != = > >= ; , 

I273
item' -> .* factor item'  	,  + - == <= < != = > >= , ) 
item' ->  % factor.item'  	,  + - == <= < != = > >= , ) 
item' -> .% factor item'  	,  + - == <= < != = > >= , ) 
item' -> .  	,  + - == <= < != = > >= , ) 
item' -> ./ factor item'  	,  + - == <= < != = > >= , ) 

I274
factor ->  id.  	,  % * / + - , ) 
factor ->  id.call_func  	,  % * / + - , ) 
factor ->  id.[ const ]  	,  % * / + - , ) 
call_func -> .( es )  	,  % * / + - , ) 

I275
operation ->  compare_op value.  	,  , ) 

I276
factor ->  ( value ).  	,  % * / + - == <= < != = > >= , ) 

I277
result -> .else block_stmt  	,  const break continue for ( do id while if return switch } 
result -> .  	,  const break continue for ( do id while if return switch } 
branch_stmt ->  if ( logical_expression ) block_stmt.result  	,  const break continue for ( do id while if return switch } 

I278
item' ->  * factor.item'  	,  + - == <= < != = > >= && || ) 
item' -> ./ factor item'  	,  + - == <= < != = > >= && || ) 
item' -> .* factor item'  	,  + - == <= < != = > >= && || ) 
item' -> .% factor item'  	,  + - == <= < != = > >= && || ) 
item' -> .  	,  + - == <= < != = > >= && || ) 

I279
factor ->  id [ const.]  	,  % * / + - == <= < != = > >= && || ) 

I280
value -> .item value'  	,  ) 
item -> .factor item'  	,  + - ) 
factor -> .const  	,  % * / + - ) 
factor -> .id call_func  	,  % * / + - ) 
factor -> .id [ const ]  	,  % * / + - ) 
factor -> .( value )  	,  % * / + - ) 
factor -> .id  	,  % * / + - ) 
factor ->  (.value )  	,  % * / + - && || ) 

I281
factor ->  ( value ).  	,  % * / + - ; 

I282
value -> .item value'  	,  ) 
item -> .factor item'  	,  + - ) 
factor -> .const  	,  % * / + - ) 
factor -> .id call_func  	,  % * / + - ) 
factor -> .id [ const ]  	,  % * / + - ) 
factor ->  (.value )  	,  % * / + - ; , 
factor -> .( value )  	,  % * / + - ) 
factor -> .id  	,  % * / + - ) 

I283
item' -> ./ factor item'  	,  + - == <= < != = > >= ; , 
item' ->  * factor.item'  	,  + - == <= < != = > >= ; , 
item' -> .* factor item'  	,  + - == <= < != = > >= ; , 
item' -> .  	,  + - == <= < != = > >= ; , 
item' -> .% factor item'  	,  + - == <= < != = > >= ; , 

I284
lop -> .&&  	,  const ( id 
bool_expression -> .  	,  ) 
bool_expression ->  lop expression.bool_expression  	,  ) 
bool_expression -> .lop expression bool_expression  	,  ) 
lop -> .||  	,  const ( id 

I285
call_func ->  ( es ).  	,  % * / + - ) 

I286
factor ->  const.  	,  % * / + - , ) 

I287
factor ->  id [ const.]  	,  % * / + - == <= < != = > >= ; , 

I288
item' ->  / factor item'.  	,  + - ) 

I289
iteration_stmt ->  do block_stmt while ( logical_expression.) ;  	,  const break continue for ( do id while if return switch } 

I290
value' -> .+ item value'  	,  ; , 
value' -> .- item value'  	,  ; , 
value' -> .  	,  ; , 
value ->  item.value'  	,  ; , 

I291
item' ->  % factor.item'  	,  + - ; 
item' -> .* factor item'  	,  + - ; 
item' -> .  	,  + - ; 
item' -> .% factor item'  	,  + - ; 
item' -> ./ factor item'  	,  + - ; 

I292
operation ->  compare_op value.  	,  && || ) 

I293
init ->  [.const ]  	,  , ; 

I294
item' -> .* factor item'  	,  + - == <= < != = > >= , ) 
item' -> .% factor item'  	,  + - == <= < != = > >= , ) 
item' -> .  	,  + - == <= < != = > >= , ) 
item' ->  / factor.item'  	,  + - == <= < != = > >= , ) 
item' -> ./ factor item'  	,  + - == <= < != = > >= , ) 

I295
value' ->  + item.value'  	,  == <= < != = > >= && || ) 
value' -> .  	,  == <= < != = > >= && || ) 
value' -> .+ item value'  	,  == <= < != = > >= && || ) 
value' -> .- item value'  	,  == <= < != = > >= && || ) 

I296
call_func ->  ( es.)  	,  % * / + - ; 

I297
value' -> .+ item value'  	,  == <= < != = > >= , ) 
value' ->  + item.value'  	,  == <= < != = > >= , ) 
value' -> .  	,  == <= < != = > >= , ) 
value' -> .- item value'  	,  == <= < != = > >= , ) 

I298
item' -> ./ factor item'  	,  + - == <= < != = > >= && || ) 
item' ->  % factor.item'  	,  + - == <= < != = > >= && || ) 
item' -> .* factor item'  	,  + - == <= < != = > >= && || ) 
item' -> .% factor item'  	,  + - == <= < != = > >= && || ) 
item' -> .  	,  + - == <= < != = > >= && || ) 

I299
eps -> .  	,  ) 
eps -> ., expression eps  	,  ) 
eps ->  , expression.eps  	,  ) 

I300
factor ->  const.  	,  % * / + - && || ) 

I301
item' -> ./ factor item'  	,  + - , ) 
item ->  factor.item'  	,  + - , ) 
item' -> .* factor item'  	,  + - , ) 
item' -> .% factor item'  	,  + - , ) 
item' -> .  	,  + - , ) 

I302
factor ->  id [ const.]  	,  % * / + - == <= < != = > >= , ) 

I303
factor ->  id.call_func  	,  % * / + - && || ) 
factor ->  id.[ const ]  	,  % * / + - && || ) 
factor ->  id.  	,  % * / + - && || ) 
call_func -> .( es )  	,  % * / + - && || ) 

I304
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; 
stmts -> .  	,  } 
stmt -> .jump_stmt  	,  const break continue for ( do id while if return switch } 
branch_stmt -> .if ( logical_expression ) block_stmt result  	,  const break continue for ( do id while if return switch } 
block_stmt ->  {.stmts }  	,  else const break continue for ( do id while if return switch } 
factor -> .id  	,  % * / + - == <= < != = > >= ; 
expression -> .value operation  	,  ; 
iteration_stmt -> .while ( logical_expression ) block_stmt  	,  const break continue for ( do id while if return switch } 
stmts -> .stmt stmts  	,  } 
jump_stmt -> .return isnull_expr ;  	,  const break continue for ( do id while if return switch } 
iteration_stmt -> .do block_stmt while ( logical_expression ) ;  	,  const break continue for ( do id while if return switch } 
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; 
stmt -> .iteration_stmt  	,  const break continue for ( do id while if return switch } 
iteration_stmt -> .for ( isnull_expr ; isnull_expr ; isnull_expr ) block_stmt  	,  const break continue for ( do id while if return switch } 
stmt -> .branch_stmt  	,  const break continue for ( do id while if return switch } 
stmt -> .assign_stmt  	,  const break continue for ( do id while if return switch } 
jump_stmt -> .break ;  	,  const break continue for ( do id while if return switch } 
item -> .factor item'  	,  + - == <= < != = > >= ; 
assign_stmt -> .expression ;  	,  const break continue for ( do id while if return switch } 
jump_stmt -> .continue ;  	,  const break continue for ( do id while if return switch } 
factor -> .const  	,  % * / + - == <= < != = > >= ; 
branch_stmt -> .switch ( id ) { case_stmt case_stmts default_stmt }  	,  const break continue for ( do id while if return switch } 
value -> .item value'  	,  == <= < != = > >= ; 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; 

I305
operation ->  equal_op value.  	,  ; , 

I306
factor ->  id [ const.]  	,  % * / + - ; 

I307
item ->  factor.item'  	,  + - ; , 
item' -> .* factor item'  	,  + - ; , 
item' -> ./ factor item'  	,  + - ; , 
item' -> .% factor item'  	,  + - ; , 
item' -> .  	,  + - ; , 

I308
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; 
stmts -> .  	,  } 
stmt -> .jump_stmt  	,  const break continue for ( do id while if return switch } 
branch_stmt -> .if ( logical_expression ) block_stmt result  	,  const break continue for ( do id while if return switch } 
factor -> .id  	,  % * / + - == <= < != = > >= ; 
expression -> .value operation  	,  ; 
iteration_stmt -> .while ( logical_expression ) block_stmt  	,  const break continue for ( do id while if return switch } 
block_stmt ->  {.stmts }  	,  const break continue for ( do id while if return switch } 
stmts -> .stmt stmts  	,  } 
jump_stmt -> .return isnull_expr ;  	,  const break continue for ( do id while if return switch } 
iteration_stmt -> .do block_stmt while ( logical_expression ) ;  	,  const break continue for ( do id while if return switch } 
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; 
stmt -> .iteration_stmt  	,  const break continue for ( do id while if return switch } 
iteration_stmt -> .for ( isnull_expr ; isnull_expr ; isnull_expr ) block_stmt  	,  const break continue for ( do id while if return switch } 
stmt -> .branch_stmt  	,  const break continue for ( do id while if return switch } 
stmt -> .assign_stmt  	,  const break continue for ( do id while if return switch } 
jump_stmt -> .break ;  	,  const break continue for ( do id while if return switch } 
item -> .factor item'  	,  + - == <= < != = > >= ; 
assign_stmt -> .expression ;  	,  const break continue for ( do id while if return switch } 
jump_stmt -> .continue ;  	,  const break continue for ( do id while if return switch } 
factor -> .const  	,  % * / + - == <= < != = > >= ; 
branch_stmt -> .switch ( id ) { case_stmt case_stmts default_stmt }  	,  const break continue for ( do id while if return switch } 
value -> .item value'  	,  == <= < != = > >= ; 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; 

I309
value' -> .  	,  ; 
value' -> .+ item value'  	,  ; 
value' ->  + item.value'  	,  ; 
value' -> .- item value'  	,  ; 

I310
item' ->  * factor item'.  	,  + - ) 

I311
operation ->  compare_op value.  	,  ; , 

I312
expression -> .value operation  	,  , ; 
item -> .factor item'  	,  + - == <= < != = > >= , ; 
factor -> .const  	,  % * / + - == <= < != = > >= , ; 
factor -> .id call_func  	,  % * / + - == <= < != = > >= , ; 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= , ; 
factor -> .( value )  	,  % * / + - == <= < != = > >= , ; 
factor -> .id  	,  % * / + - == <= < != = > >= , ; 
init ->  =.expression  	,  , ; 
value -> .item value'  	,  == <= < != = > >= , ; 

I313
operation ->  equal_op value.  	,  , ) 

I314
value' -> .+ item value'  	,  , ) 
value ->  item.value'  	,  , ) 
value' -> .  	,  , ) 
value' -> .- item value'  	,  , ) 

I315
call_func ->  ( es.)  	,  % * / + - == <= < != = > >= && || ) 

I316
factor -> .const  	,  % * / + - ; , 
factor -> .id [ const ]  	,  % * / + - ; , 
item' ->  *.factor item'  	,  + - ; , 
factor -> .id  	,  % * / + - ; , 
factor -> .( value )  	,  % * / + - ; , 
factor -> .id call_func  	,  % * / + - ; , 

I317
item' ->  * factor item'.  	,  + - == <= < != = > >= , ) 

I318
value' ->  - item value'.  	,  == <= < != = > >= && || ) 

I319
value' -> .+ item value'  	,  == <= < != = > >= , ; 
value ->  item.value'  	,  == <= < != = > >= , ; 
value' -> .  	,  == <= < != = > >= , ; 
value' -> .- item value'  	,  == <= < != = > >= , ; 

I320
factor ->  id call_func.  	,  % * / + - , ) 

I321
item' ->  % factor item'.  	,  + - == <= < != = > >= && || ) 

I322
block_stmt ->  { stmts.}  	,  const break continue for ( do id while if return switch } 

I323
factor ->  id [ const ].  	,  % * / + - == <= < != = > >= && || ) 

I324
factor -> .const  	,  % * / + - ; , 
factor -> .id [ const ]  	,  % * / + - ; , 
factor -> .id  	,  % * / + - ; , 
factor -> .( value )  	,  % * / + - ; , 
item' ->  %.factor item'  	,  + - ; , 
factor -> .id call_func  	,  % * / + - ; , 

I325
factor -> .const  	,  % * / + - , ) 
item' ->  %.factor item'  	,  + - , ) 
factor -> .id call_func  	,  % * / + - , ) 
factor -> .id [ const ]  	,  % * / + - , ) 
factor -> .id  	,  % * / + - , ) 
factor -> .( value )  	,  % * / + - , ) 

I326
block_stmt ->  { stmts.}  	,  else const break continue for ( do id while if return switch } 

I327
call_func ->  ( es ).  	,  % * / + - ; 

I328
value -> .item value'  	,  ) 
item -> .factor item'  	,  + - ) 
factor -> .const  	,  % * / + - ) 
factor -> .id call_func  	,  % * / + - ) 
factor -> .id [ const ]  	,  % * / + - ) 
factor -> .( value )  	,  % * / + - ) 
factor ->  (.value )  	,  % * / + - == <= < != = > >= , ; 
factor -> .id  	,  % * / + - ) 

I329
factor -> .const  	,  % * / + - ; , 
factor -> .id [ const ]  	,  % * / + - ; , 
value' ->  +.item value'  	,  ; , 
factor -> .id  	,  % * / + - ; , 
factor -> .( value )  	,  % * / + - ; , 
factor -> .id call_func  	,  % * / + - ; , 
item -> .factor item'  	,  + - ; , 

I330
factor -> .const  	,  % * / + - ; , 
factor -> .id [ const ]  	,  % * / + - ; , 
factor -> .id  	,  % * / + - ; , 
factor -> .( value )  	,  % * / + - ; , 
factor -> .id call_func  	,  % * / + - ; , 
item -> .factor item'  	,  + - ; , 
value' ->  -.item value'  	,  ; , 

I331
item' ->  / factor item'.  	,  + - == <= < != = > >= , ) 

I332
call_func ->  ( es ).  	,  % * / + - == <= < != = > >= && || ) 

I333
factor ->  ( value.)  	,  % * / + - , ) 

I334
item' ->  / factor item'.  	,  + - == <= < != = > >= && || ) 

I335
item' ->  % factor item'.  	,  + - ; 

I336
factor -> .const  	,  % * / + - , ) 
item -> .factor item'  	,  + - , ) 
value' ->  +.item value'  	,  , ) 
factor -> .id call_func  	,  % * / + - , ) 
factor -> .id [ const ]  	,  % * / + - , ) 
factor -> .id  	,  % * / + - , ) 
factor -> .( value )  	,  % * / + - , ) 

I337
call_func -> .( es )  	,  % * / + - == <= < != = > >= , ; 
factor ->  id.call_func  	,  % * / + - == <= < != = > >= , ; 
factor ->  id.[ const ]  	,  % * / + - == <= < != = > >= , ; 
factor ->  id.  	,  % * / + - == <= < != = > >= , ; 

I338
factor ->  id [.const ]  	,  % * / + - ; , 

I339
result ->  else.block_stmt  	,  const break continue for ( do id while if return switch } 
block_stmt -> .{ stmts }  	,  const break continue for ( do id while if return switch } 

I340
factor ->  const.  	,  % * / + - == <= < != = > >= , ; 

I341
value' ->  + item value'.  	,  == <= < != = > >= ; , 

I342
factor -> .const  	,  % * / + - , ) 
item' ->  *.factor item'  	,  + - , ) 
factor -> .id call_func  	,  % * / + - , ) 
factor -> .id [ const ]  	,  % * / + - , ) 
factor -> .id  	,  % * / + - , ) 
factor -> .( value )  	,  % * / + - , ) 

I343
call_func ->  ( es ).  	,  % * / + - == <= < != = > >= ; , 

I344
call_func ->  ( es ).  	,  % * / + - == <= < != = > >= , ) 

I345
item ->  factor item'.  	,  + - ; , 

I346
factor ->  ( value.)  	,  % * / + - && || ) 

I347
factor -> .id call_func  	,  % * / + - && || ) 
factor -> .id [ const ]  	,  % * / + - && || ) 
item' ->  /.factor item'  	,  + - && || ) 
factor -> .id  	,  % * / + - && || ) 
factor -> .( value )  	,  % * / + - && || ) 
factor -> .const  	,  % * / + - && || ) 

I348
value ->  item value'.  	,  ; , 

I349
value' ->  + item value'.  	,  == <= < != = > >= && || ) 

I350
item' ->  * factor item'.  	,  + - == <= < != = > >= && || ) 

I351
factor ->  id call_func.  	,  % * / + - && || ) 

I352
factor ->  id [.const ]  	,  % * / + - && || ) 

I353
init ->  = expression.  	,  , ; 

I354
item' ->  *.factor item'  	,  + - && || ) 
factor -> .id call_func  	,  % * / + - && || ) 
factor -> .id [ const ]  	,  % * / + - && || ) 
factor -> .id  	,  % * / + - && || ) 
factor -> .( value )  	,  % * / + - && || ) 
factor -> .const  	,  % * / + - && || ) 

I355
factor -> .const  	,  % * / + - , ) 
item -> .factor item'  	,  + - , ) 
factor -> .id call_func  	,  % * / + - , ) 
factor -> .id [ const ]  	,  % * / + - , ) 
factor -> .id  	,  % * / + - , ) 
factor -> .( value )  	,  % * / + - , ) 
value' ->  -.item value'  	,  , ) 

I356
item' ->  /.factor item'  	,  + - ; , 
factor -> .const  	,  % * / + - ; , 
factor -> .id [ const ]  	,  % * / + - ; , 
factor -> .id  	,  % * / + - ; , 
factor -> .( value )  	,  % * / + - ; , 
factor -> .id call_func  	,  % * / + - ; , 

I357
item -> .factor item'  	,  + - && || ) 
factor -> .id call_func  	,  % * / + - && || ) 
factor -> .id [ const ]  	,  % * / + - && || ) 
factor -> .id  	,  % * / + - && || ) 
value' ->  -.item value'  	,  && || ) 
factor -> .( value )  	,  % * / + - && || ) 
factor -> .const  	,  % * / + - && || ) 

I358
expression -> .value operation  	,  , ) 
item -> .factor item'  	,  + - == <= < != = > >= , ) 
factor -> .const  	,  % * / + - == <= < != = > >= , ) 
factor -> .id call_func  	,  % * / + - == <= < != = > >= , ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= , ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= , ) 
call_func ->  (.es )  	,  % * / + - && || ) 
factor -> .id  	,  % * / + - == <= < != = > >= , ) 
es -> .expression eps  	,  ) 
value -> .item value'  	,  == <= < != = > >= , ) 

I359
compare_op -> .<=  	,  const ( id 
compare_op -> .>  	,  const ( id 
operation -> .  	,  , ; 
equal_op -> .=  	,  const ( id 
operation -> .compare_op value  	,  , ; 
compare_op -> .>=  	,  const ( id 
compare_op -> .<  	,  const ( id 
compare_op -> .==  	,  const ( id 
compare_op -> .!=  	,  const ( id 
operation -> .equal_op value  	,  , ; 
expression ->  value.operation  	,  , ; 

I360
item -> .factor item'  	,  + - && || ) 
factor -> .id call_func  	,  % * / + - && || ) 
factor -> .id [ const ]  	,  % * / + - && || ) 
value' ->  +.item value'  	,  && || ) 
factor -> .id  	,  % * / + - && || ) 
factor -> .( value )  	,  % * / + - && || ) 
factor -> .const  	,  % * / + - && || ) 

I361
factor ->  id [.const ]  	,  % * / + - , ) 

I362
value' ->  - item value'.  	,  ; 

I363
branch_stmt ->  if ( logical_expression ) block_stmt result.  	,  const break continue for ( do id while if return switch } 

I364
init ->  [ const.]  	,  , ; 

I365
item' ->  /.factor item'  	,  + - , ) 
factor -> .const  	,  % * / + - , ) 
factor -> .id call_func  	,  % * / + - , ) 
factor -> .id [ const ]  	,  % * / + - , ) 
factor -> .id  	,  % * / + - , ) 
factor -> .( value )  	,  % * / + - , ) 

I366
case_stmt ->  case.const : stmts  	,  default } case 

I367
value' ->  - item value'.  	,  == <= < != = > >= ; , 

I368
item ->  factor item'.  	,  + - , ) 

I369
eps ->  , expression eps.  	,  ) 

I370
item' -> .* factor item'  	,  + - == <= < != = > >= , ; 
item ->  factor.item'  	,  + - == <= < != = > >= , ; 
item' -> .% factor item'  	,  + - == <= < != = > >= , ; 
item' -> .  	,  + - == <= < != = > >= , ; 
item' -> ./ factor item'  	,  + - == <= < != = > >= , ; 

I371
item' ->  % factor item'.  	,  + - == <= < != = > >= , ) 

I372
item' ->  / factor item'.  	,  + - ; 

I373
factor ->  id call_func.  	,  % * / + - ; , 

I374
case_stmts -> .case_stmt case_stmts  	,  default } 
case_stmts -> .  	,  default } 
branch_stmt ->  switch ( id ) { case_stmt.case_stmts default_stmt }  	,  const break continue for ( do id while if return switch } 
case_stmt -> .case const : stmts  	,  case default } 

I375
factor -> .id call_func  	,  % * / + - && || ) 
factor -> .id [ const ]  	,  % * / + - && || ) 
factor -> .id  	,  % * / + - && || ) 
factor -> .( value )  	,  % * / + - && || ) 
factor -> .const  	,  % * / + - && || ) 
item' ->  %.factor item'  	,  + - && || ) 

I376
value' ->  + item value'.  	,  ; 

I377
item' ->  * factor item'.  	,  + - == <= < != = > >= ; , 

I378
iteration_stmt ->  do block_stmt while ( logical_expression ).;  	,  const break continue for ( do id while if return switch } 

I379
value' ->  + item value'.  	,  == <= < != = > >= , ) 

I380
value ->  item value'.  	,  , ) 

I381
factor ->  ( value.)  	,  % * / + - ; , 

I382
factor ->  id [ const ].  	,  % * / + - == <= < != = > >= ; , 

I383
factor ->  id [ const ].  	,  % * / + - ; 

I384
vars ->  , id init vars.  	,  ; 

I385
isnull_expr -> .expression  	,  ) 
factor -> .id call_func  	,  % * / + - == <= < != = > >= ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ) 
isnull_expr -> .  	,  ) 
iteration_stmt ->  for ( isnull_expr ; isnull_expr ;.isnull_expr ) block_stmt  	,  const break continue for ( do id while if return switch } 
factor -> .id  	,  % * / + - == <= < != = > >= ) 
expression -> .value operation  	,  ) 
item -> .factor item'  	,  + - == <= < != = > >= ) 
factor -> .const  	,  % * / + - == <= < != = > >= ) 
value -> .item value'  	,  == <= < != = > >= ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= ) 

I386
item' ->  % factor item'.  	,  + - == <= < != = > >= ; , 

I387
expression -> .value operation  	,  , ) 
item -> .factor item'  	,  + - == <= < != = > >= , ) 
factor -> .const  	,  % * / + - == <= < != = > >= , ) 
factor -> .id call_func  	,  % * / + - == <= < != = > >= , ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= , ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= , ) 
factor -> .id  	,  % * / + - == <= < != = > >= , ) 
call_func ->  (.es )  	,  % * / + - , ) 
es -> .expression eps  	,  ) 
value -> .item value'  	,  == <= < != = > >= , ) 

I388
value' ->  - item value'.  	,  == <= < != = > >= , ) 

I389
bool_expression ->  lop expression bool_expression.  	,  ) 

I390
item ->  factor item'.  	,  + - && || ) 

I391
value ->  item value'.  	,  && || ) 

I392
item' ->  * factor item'.  	,  + - ; 

I393
expression -> .value operation  	,  , ) 
item -> .factor item'  	,  + - == <= < != = > >= , ) 
factor -> .const  	,  % * / + - == <= < != = > >= , ) 
factor -> .id call_func  	,  % * / + - == <= < != = > >= , ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= , ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= , ) 
factor -> .id  	,  % * / + - == <= < != = > >= , ) 
es -> .expression eps  	,  ) 
call_func ->  (.es )  	,  % * / + - ; , 
value -> .item value'  	,  == <= < != = > >= , ) 

I394
item' ->  / factor item'.  	,  + - == <= < != = > >= ; , 

I395
factor ->  id [ const ].  	,  % * / + - == <= < != = > >= , ) 

I396
item' -> ./ factor item'  	,  + - , ) 
item' ->  % factor.item'  	,  + - , ) 
item' -> .* factor item'  	,  + - , ) 
item' -> .% factor item'  	,  + - , ) 
item' -> .  	,  + - , ) 

I397
call_func ->  ( es.)  	,  % * / + - && || ) 

I398
block_stmt ->  { stmts }.  	,  else const break continue for ( do id while if return switch } 

I399
value ->  item value'.  	,  == <= < != = > >= , ; 

I400
factor ->  id [ const.]  	,  % * / + - , ) 

I401
factor -> .const  	,  % * / + - , ; 
operation ->  equal_op.value  	,  , ; 
item -> .factor item'  	,  + - , ; 
factor -> .id call_func  	,  % * / + - , ; 
factor -> .id [ const ]  	,  % * / + - , ; 
factor -> .id  	,  % * / + - , ; 
factor -> .( value )  	,  % * / + - , ; 
value -> .item value'  	,  , ; 

I402
factor ->  ( value.)  	,  % * / + - == <= < != = > >= , ; 

I403
factor -> .const  	,  % * / + - , ; 
item -> .factor item'  	,  + - , ; 
operation ->  compare_op.value  	,  , ; 
factor -> .id call_func  	,  % * / + - , ; 
factor -> .id [ const ]  	,  % * / + - , ; 
factor -> .id  	,  % * / + - , ; 
factor -> .( value )  	,  % * / + - , ; 
value -> .item value'  	,  , ; 

I404
item' -> .* factor item'  	,  + - ; , 
item' -> ./ factor item'  	,  + - ; , 
item' -> .% factor item'  	,  + - ; , 
item' ->  % factor.item'  	,  + - ; , 
item' -> .  	,  + - ; , 

I405
factor -> .const  	,  % * / + - == <= < != = > >= , ; 
factor -> .id call_func  	,  % * / + - == <= < != = > >= , ; 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= , ; 
factor -> .( value )  	,  % * / + - == <= < != = > >= , ; 
factor -> .id  	,  % * / + - == <= < != = > >= , ; 
item' ->  /.factor item'  	,  + - == <= < != = > >= , ; 

I406
iteration_stmt ->  do block_stmt while ( logical_expression ) ;.  	,  const break continue for ( do id while if return switch } 

I407
expression ->  value operation.  	,  , ; 

I408
item' -> .* factor item'  	,  + - && || ) 
item' -> ./ factor item'  	,  + - && || ) 
item' -> .  	,  + - && || ) 
item' ->  / factor.item'  	,  + - && || ) 
item' -> .% factor item'  	,  + - && || ) 

I409
value' -> .  	,  && || ) 
value' -> .+ item value'  	,  && || ) 
value' -> .- item value'  	,  && || ) 
value' ->  - item.value'  	,  && || ) 

I410
item' -> .* factor item'  	,  + - && || ) 
item' -> ./ factor item'  	,  + - && || ) 
item' ->  * factor.item'  	,  + - && || ) 
item' -> .  	,  + - && || ) 
item' -> .% factor item'  	,  + - && || ) 

I411
expression -> .value operation  	,  , ) 
item -> .factor item'  	,  + - == <= < != = > >= , ) 
factor -> .const  	,  % * / + - == <= < != = > >= , ) 
call_func ->  (.es )  	,  % * / + - == <= < != = > >= , ; 
factor -> .id call_func  	,  % * / + - == <= < != = > >= , ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= , ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= , ) 
factor -> .id  	,  % * / + - == <= < != = > >= , ) 
es -> .expression eps  	,  ) 
value -> .item value'  	,  == <= < != = > >= , ) 

I412
item' -> ./ factor item'  	,  + - , ) 
item' ->  * factor.item'  	,  + - , ) 
item' -> .* factor item'  	,  + - , ) 
item' -> .% factor item'  	,  + - , ) 
item' -> .  	,  + - , ) 

I413
case_stmt ->  case.const : stmts  	,  case default } 

I414
item ->  factor item'.  	,  + - == <= < != = > >= , ; 

I415
factor ->  id [.const ]  	,  % * / + - == <= < != = > >= , ; 

I416
block_stmt ->  { stmts }.  	,  const break continue for ( do id while if return switch } 

I417
factor ->  ( value ).  	,  % * / + - && || ) 

I418
call_func ->  ( es.)  	,  % * / + - , ) 

I419
factor ->  ( value ).  	,  % * / + - ; , 

I420
item -> .factor item'  	,  + - == <= < != = > >= , ; 
factor -> .const  	,  % * / + - == <= < != = > >= , ; 
value' ->  +.item value'  	,  == <= < != = > >= , ; 
factor -> .id call_func  	,  % * / + - == <= < != = > >= , ; 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= , ; 
factor -> .( value )  	,  % * / + - == <= < != = > >= , ; 
factor -> .id  	,  % * / + - == <= < != = > >= , ; 

I421
value -> .item value'  	,  ) 
item -> .factor item'  	,  + - ) 
factor -> .const  	,  % * / + - ) 
factor -> .id call_func  	,  % * / + - ) 
factor -> .id [ const ]  	,  % * / + - ) 
factor -> .( value )  	,  % * / + - ) 
factor -> .id  	,  % * / + - ) 
factor ->  (.value )  	,  % * / + - == <= < != = > >= ) 

I422
case_stmts ->  case_stmt.case_stmts  	,  default } 
case_stmts -> .case_stmt case_stmts  	,  default } 
case_stmts -> .  	,  default } 
case_stmt -> .case const : stmts  	,  case default } 

I423
item' ->  / factor.item'  	,  + - ; , 
item' -> .* factor item'  	,  + - ; , 
item' -> ./ factor item'  	,  + - ; , 
item' -> .% factor item'  	,  + - ; , 
item' -> .  	,  + - ; , 

I424
value' -> .+ item value'  	,  , ) 
value' ->  - item.value'  	,  , ) 
value' -> .  	,  , ) 
value' -> .- item value'  	,  , ) 

I425
result ->  else block_stmt.  	,  const break continue for ( do id while if return switch } 

I426
factor -> .const  	,  % * / + - == <= < != = > >= , ; 
item' ->  %.factor item'  	,  + - == <= < != = > >= , ; 
factor -> .id call_func  	,  % * / + - == <= < != = > >= , ; 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= , ; 
factor -> .( value )  	,  % * / + - == <= < != = > >= , ; 
factor -> .id  	,  % * / + - == <= < != = > >= , ; 

I427
value' -> .+ item value'  	,  ; , 
value' -> .- item value'  	,  ; , 
value' -> .  	,  ; , 
value' ->  - item.value'  	,  ; , 

I428
factor ->  id [ const.]  	,  % * / + - ; , 

I429
factor ->  const.  	,  % * / + - == <= < != = > >= ) 

I430
factor ->  ( value ).  	,  % * / + - , ) 

I431
value' -> .  	,  && || ) 
value' -> .+ item value'  	,  && || ) 
value' ->  + item.value'  	,  && || ) 
value' -> .- item value'  	,  && || ) 

I432
branch_stmt ->  switch ( id ) { case_stmt case_stmts.default_stmt }  	,  const break continue for ( do id while if return switch } 
default_stmt -> .default : stmts  	,  } 
default_stmt -> .  	,  } 

I433
item' -> .* factor item'  	,  + - && || ) 
item' -> ./ factor item'  	,  + - && || ) 
item' -> .  	,  + - && || ) 
item' -> .% factor item'  	,  + - && || ) 
item' ->  % factor.item'  	,  + - && || ) 

I434
factor ->  id [ const.]  	,  % * / + - && || ) 

I435
call_func ->  ( es.)  	,  % * / + - ; , 

I436
case_stmt ->  case const.: stmts  	,  default } case 

I437
item' ->  * factor.item'  	,  + - ; , 
item' -> .* factor item'  	,  + - ; , 
item' -> ./ factor item'  	,  + - ; , 
item' -> .% factor item'  	,  + - ; , 
item' -> .  	,  + - ; , 

I438
isnull_expr ->  expression.  	,  ) 

I439
value' -> .+ item value'  	,  ; , 
value' ->  + item.value'  	,  ; , 
value' -> .- item value'  	,  ; , 
value' -> .  	,  ; , 

I440
item' ->  *.factor item'  	,  + - == <= < != = > >= , ; 
factor -> .const  	,  % * / + - == <= < != = > >= , ; 
factor -> .id call_func  	,  % * / + - == <= < != = > >= , ; 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= , ; 
factor -> .( value )  	,  % * / + - == <= < != = > >= , ; 
factor -> .id  	,  % * / + - == <= < != = > >= , ; 

I441
value' -> .+ item value'  	,  , ) 
value' ->  + item.value'  	,  , ) 
value' -> .  	,  , ) 
value' -> .- item value'  	,  , ) 

I442
item' -> .% factor item'  	,  + - == <= < != = > >= ) 
item' -> .* factor item'  	,  + - == <= < != = > >= ) 
item' -> .  	,  + - == <= < != = > >= ) 
item ->  factor.item'  	,  + - == <= < != = > >= ) 
item' -> ./ factor item'  	,  + - == <= < != = > >= ) 

I443
compare_op -> .<=  	,  const ( id 
expression ->  value.operation  	,  ) 
compare_op -> .>  	,  const ( id 
equal_op -> .=  	,  const ( id 
operation -> .equal_op value  	,  ) 
compare_op -> .>=  	,  const ( id 
compare_op -> .<  	,  const ( id 
compare_op -> .==  	,  const ( id 
compare_op -> .!=  	,  const ( id 
operation -> .compare_op value  	,  ) 
operation -> .  	,  ) 

I444
init ->  [ const ].  	,  , ; 

I445
item -> .factor item'  	,  + - == <= < != = > >= , ; 
factor -> .const  	,  % * / + - == <= < != = > >= , ; 
factor -> .id call_func  	,  % * / + - == <= < != = > >= , ; 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= , ; 
factor -> .( value )  	,  % * / + - == <= < != = > >= , ; 
factor -> .id  	,  % * / + - == <= < != = > >= , ; 
value' ->  -.item value'  	,  == <= < != = > >= , ; 

I446
factor ->  id.call_func  	,  % * / + - == <= < != = > >= ) 
factor ->  id.[ const ]  	,  % * / + - == <= < != = > >= ) 
factor ->  id.  	,  % * / + - == <= < != = > >= ) 
call_func -> .( es )  	,  % * / + - == <= < != = > >= ) 

I447
item' -> ./ factor item'  	,  + - , ) 
item' ->  / factor.item'  	,  + - , ) 
item' -> .* factor item'  	,  + - , ) 
item' -> .% factor item'  	,  + - , ) 
item' -> .  	,  + - , ) 

I448
value' -> .+ item value'  	,  == <= < != = > >= ) 
value ->  item.value'  	,  == <= < != = > >= ) 
value' -> .  	,  == <= < != = > >= ) 
value' -> .- item value'  	,  == <= < != = > >= ) 

I449
iteration_stmt ->  for ( isnull_expr ; isnull_expr ; isnull_expr.) block_stmt  	,  const break continue for ( do id while if return switch } 

I450
factor ->  id call_func.  	,  % * / + - == <= < != = > >= , ; 

I451
value -> .item value'  	,  ) 
item -> .factor item'  	,  + - ) 
factor -> .const  	,  % * / + - ) 
factor -> .id call_func  	,  % * / + - ) 
factor -> .id [ const ]  	,  % * / + - ) 
factor ->  (.value )  	,  % * / + - , ; 
factor -> .( value )  	,  % * / + - ) 
factor -> .id  	,  % * / + - ) 

I452
value' -> .+ item value'  	,  , ; 
value ->  item.value'  	,  , ; 
value' -> .  	,  , ; 
value' -> .- item value'  	,  , ; 

I453
value -> .item value'  	,  ) 
item -> .factor item'  	,  + - ) 
factor -> .const  	,  % * / + - ) 
factor -> .id call_func  	,  % * / + - ) 
factor -> .id [ const ]  	,  % * / + - ) 
factor -> .( value )  	,  % * / + - ) 
operation ->  equal_op.value  	,  ) 
factor -> .id  	,  % * / + - ) 

I454
operation ->  compare_op value.  	,  , ; 

I455
factor -> .id call_func  	,  % * / + - == <= < != = > >= ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ) 
factor -> .id  	,  % * / + - == <= < != = > >= ) 
item -> .factor item'  	,  + - == <= < != = > >= ) 
value' ->  +.item value'  	,  == <= < != = > >= ) 
factor -> .const  	,  % * / + - == <= < != = > >= ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= ) 

I456
item' ->  * factor item'.  	,  + - && || ) 

I457
value' ->  + item value'.  	,  ; , 

I458
factor ->  id [ const ].  	,  % * / + - , ) 

I459
factor ->  id [ const ].  	,  % * / + - && || ) 

I460
item ->  factor item'.  	,  + - == <= < != = > >= ) 

I461
item' ->  % factor item'.  	,  + - , ) 

I462
operation ->  equal_op value.  	,  , ; 

I463
item' -> .* factor item'  	,  + - == <= < != = > >= , ; 
item' ->  % factor.item'  	,  + - == <= < != = > >= , ; 
item' -> .% factor item'  	,  + - == <= < != = > >= , ; 
item' -> .  	,  + - == <= < != = > >= , ; 
item' -> ./ factor item'  	,  + - == <= < != = > >= , ; 

I464
value' ->  - item value'.  	,  ; , 

I465
value' ->  + item value'.  	,  && || ) 

I466
value' ->  + item value'.  	,  , ) 

I467
factor ->  id call_func.  	,  % * / + - == <= < != = > >= ) 

I468
iteration_stmt ->  for ( isnull_expr ; isnull_expr ; isnull_expr ).block_stmt  	,  const break continue for ( do id while if return switch } 
block_stmt -> .{ stmts }  	,  const break continue for ( do id while if return switch } 

I469
case_stmt ->  case const.: stmts  	,  case default } 

I470
factor ->  id [ const.]  	,  % * / + - == <= < != = > >= , ; 

I471
item' ->  / factor item'.  	,  + - ; , 

I472
factor ->  id [ const ].  	,  % * / + - ; , 

I473
default_stmt ->  default.: stmts  	,  } 

I474
factor ->  ( value ).  	,  % * / + - == <= < != = > >= , ; 

I475
value' ->  - item value'.  	,  && || ) 

I476
item' ->  / factor item'.  	,  + - , ) 

I477
call_func ->  ( es ).  	,  % * / + - , ) 

I478
factor ->  ( value.)  	,  % * / + - == <= < != = > >= ) 

I479
value' -> .+ item value'  	,  == <= < != = > >= , ; 
value' ->  + item.value'  	,  == <= < != = > >= , ; 
value' -> .  	,  == <= < != = > >= , ; 
value' -> .- item value'  	,  == <= < != = > >= , ; 

I480
item ->  factor.item'  	,  + - , ; 
item' -> ./ factor item'  	,  + - , ; 
item' -> .* factor item'  	,  + - , ; 
item' -> .% factor item'  	,  + - , ; 
item' -> .  	,  + - , ; 

I481
expression -> .value operation  	,  , ) 
item -> .factor item'  	,  + - == <= < != = > >= , ) 
factor -> .const  	,  % * / + - == <= < != = > >= , ) 
call_func ->  (.es )  	,  % * / + - == <= < != = > >= ) 
factor -> .id call_func  	,  % * / + - == <= < != = > >= , ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= , ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= , ) 
factor -> .id  	,  % * / + - == <= < != = > >= , ) 
es -> .expression eps  	,  ) 
value -> .item value'  	,  == <= < != = > >= , ) 

I482
item' ->  % factor item'.  	,  + - ; , 

I483
case_stmts ->  case_stmt case_stmts.  	,  default } 

I484
item' -> .* factor item'  	,  + - == <= < != = > >= , ; 
item' -> .% factor item'  	,  + - == <= < != = > >= , ; 
item' -> .  	,  + - == <= < != = > >= , ; 
item' ->  / factor.item'  	,  + - == <= < != = > >= , ; 
item' -> ./ factor item'  	,  + - == <= < != = > >= , ; 

I485
item' ->  / factor item'.  	,  + - && || ) 

I486
factor -> .id call_func  	,  % * / + - == <= < != = > >= ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ) 
factor -> .id  	,  % * / + - == <= < != = > >= ) 
item -> .factor item'  	,  + - == <= < != = > >= ) 
value' ->  -.item value'  	,  == <= < != = > >= ) 
factor -> .const  	,  % * / + - == <= < != = > >= ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= ) 

I487
item' ->  * factor item'.  	,  + - ; , 

I488
item' -> .* factor item'  	,  + - == <= < != = > >= , ; 
item' -> .% factor item'  	,  + - == <= < != = > >= , ; 
item' -> .  	,  + - == <= < != = > >= , ; 
item' -> ./ factor item'  	,  + - == <= < != = > >= , ; 
item' ->  * factor.item'  	,  + - == <= < != = > >= , ; 

I489
factor ->  id [.const ]  	,  % * / + - == <= < != = > >= ) 

I490
factor -> .id call_func  	,  % * / + - == <= < != = > >= ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ) 
factor -> .id  	,  % * / + - == <= < != = > >= ) 
item' ->  %.factor item'  	,  + - == <= < != = > >= ) 
factor -> .const  	,  % * / + - == <= < != = > >= ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= ) 

I491
item' ->  % factor item'.  	,  + - && || ) 

I492
value ->  item value'.  	,  == <= < != = > >= ) 

I493
call_func ->  ( es ).  	,  % * / + - && || ) 

I494
factor -> .id call_func  	,  % * / + - == <= < != = > >= ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ) 
factor -> .id  	,  % * / + - == <= < != = > >= ) 
item' ->  /.factor item'  	,  + - == <= < != = > >= ) 
factor -> .const  	,  % * / + - == <= < != = > >= ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= ) 

I495
item' ->  * factor item'.  	,  + - , ) 

I496
value' ->  - item value'.  	,  , ) 

I497
factor ->  const.  	,  % * / + - , ; 

I498
factor -> .id call_func  	,  % * / + - == <= < != = > >= ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ) 
factor -> .id  	,  % * / + - == <= < != = > >= ) 
item' ->  *.factor item'  	,  + - == <= < != = > >= ) 
factor -> .const  	,  % * / + - == <= < != = > >= ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= ) 

I499
expression ->  value operation.  	,  ) 

I500
call_func ->  ( es ).  	,  % * / + - ; , 

I501
value -> .item value'  	,  ) 
item -> .factor item'  	,  + - ) 
factor -> .const  	,  % * / + - ) 
factor -> .id call_func  	,  % * / + - ) 
factor -> .id [ const ]  	,  % * / + - ) 
factor -> .( value )  	,  % * / + - ) 
factor -> .id  	,  % * / + - ) 
operation ->  compare_op.value  	,  ) 

I502
branch_stmt ->  switch ( id ) { case_stmt case_stmts default_stmt.}  	,  const break continue for ( do id while if return switch } 

I503
factor ->  id.  	,  % * / + - , ; 
factor ->  id.call_func  	,  % * / + - , ; 
factor ->  id.[ const ]  	,  % * / + - , ; 
call_func -> .( es )  	,  % * / + - , ; 

I504
stmt -> .jump_stmt  	,  const break continue for ( do id while if return switch default } case 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; 
jump_stmt -> .continue ;  	,  const break continue for ( do id while if return switch default } case 
assign_stmt -> .expression ;  	,  const break continue for ( do id while if return switch default } case 
factor -> .id  	,  % * / + - == <= < != = > >= ; 
expression -> .value operation  	,  ; 
stmts -> .  	,  default } case 
branch_stmt -> .switch ( id ) { case_stmt case_stmts default_stmt }  	,  const break continue for ( do id while if return switch default } case 
stmt -> .assign_stmt  	,  const break continue for ( do id while if return switch default } case 
stmts -> .stmt stmts  	,  default } case 
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; 
iteration_stmt -> .for ( isnull_expr ; isnull_expr ; isnull_expr ) block_stmt  	,  const break continue for ( do id while if return switch default } case 
stmt -> .iteration_stmt  	,  const break continue for ( do id while if return switch default } case 
iteration_stmt -> .do block_stmt while ( logical_expression ) ;  	,  const break continue for ( do id while if return switch default } case 
jump_stmt -> .break ;  	,  const break continue for ( do id while if return switch default } case 
iteration_stmt -> .while ( logical_expression ) block_stmt  	,  const break continue for ( do id while if return switch default } case 
item -> .factor item'  	,  + - == <= < != = > >= ; 
case_stmt ->  case const :.stmts  	,  default } case 
stmt -> .branch_stmt  	,  const break continue for ( do id while if return switch default } case 
jump_stmt -> .return isnull_expr ;  	,  const break continue for ( do id while if return switch default } case 
factor -> .const  	,  % * / + - == <= < != = > >= ; 
branch_stmt -> .if ( logical_expression ) block_stmt result  	,  const break continue for ( do id while if return switch default } case 
value -> .item value'  	,  == <= < != = > >= ; 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; 

I505
call_func ->  ( es.)  	,  % * / + - == <= < != = > >= , ; 

I506
value' -> .+ item value'  	,  == <= < != = > >= , ; 
value' ->  - item.value'  	,  == <= < != = > >= , ; 
value' -> .  	,  == <= < != = > >= , ; 
value' -> .- item value'  	,  == <= < != = > >= , ; 

I507
iteration_stmt -> .for ( isnull_expr ; isnull_expr ; isnull_expr ) block_stmt  	,  const break continue for ( do id while if return switch case default } 
stmt -> .iteration_stmt  	,  const break continue for ( do id while if return switch case default } 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; 
jump_stmt -> .break ;  	,  const break continue for ( do id while if return switch case default } 
factor -> .id  	,  % * / + - == <= < != = > >= ; 
expression -> .value operation  	,  ; 
iteration_stmt -> .do block_stmt while ( logical_expression ) ;  	,  const break continue for ( do id while if return switch case default } 
stmts -> .stmt stmts  	,  case default } 
stmts -> .  	,  case default } 
branch_stmt -> .switch ( id ) { case_stmt case_stmts default_stmt }  	,  const break continue for ( do id while if return switch case default } 
stmt -> .assign_stmt  	,  const break continue for ( do id while if return switch case default } 
jump_stmt -> .continue ;  	,  const break continue for ( do id while if return switch case default } 
branch_stmt -> .if ( logical_expression ) block_stmt result  	,  const break continue for ( do id while if return switch case default } 
assign_stmt -> .expression ;  	,  const break continue for ( do id while if return switch case default } 
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; 
stmt -> .jump_stmt  	,  const break continue for ( do id while if return switch case default } 
stmt -> .branch_stmt  	,  const break continue for ( do id while if return switch case default } 
item -> .factor item'  	,  + - == <= < != = > >= ; 
factor -> .const  	,  % * / + - == <= < != = > >= ; 
iteration_stmt -> .while ( logical_expression ) block_stmt  	,  const break continue for ( do id while if return switch case default } 
case_stmt ->  case const :.stmts  	,  case default } 
jump_stmt -> .return isnull_expr ;  	,  const break continue for ( do id while if return switch case default } 
value -> .item value'  	,  == <= < != = > >= ; 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; 

I508
call_func ->  ( es.)  	,  % * / + - == <= < != = > >= ) 

I509
factor -> .const  	,  % * / + - , ; 
item -> .factor item'  	,  + - , ; 
factor -> .id call_func  	,  % * / + - , ; 
factor -> .id [ const ]  	,  % * / + - , ; 
factor -> .id  	,  % * / + - , ; 
factor -> .( value )  	,  % * / + - , ; 
value' ->  -.item value'  	,  , ; 

I510
assign_stmt ->  expression.;  	,  const break continue for ( do id while if return switch default } case 

I511
stmt -> .jump_stmt  	,  const break continue for ( do id while if return switch default } case 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; 
jump_stmt -> .continue ;  	,  const break continue for ( do id while if return switch default } case 
assign_stmt -> .expression ;  	,  const break continue for ( do id while if return switch default } case 
factor -> .id  	,  % * / + - == <= < != = > >= ; 
expression -> .value operation  	,  ; 
stmts -> .  	,  default } case 
branch_stmt -> .switch ( id ) { case_stmt case_stmts default_stmt }  	,  const break continue for ( do id while if return switch default } case 
stmt -> .assign_stmt  	,  const break continue for ( do id while if return switch default } case 
stmts -> .stmt stmts  	,  default } case 
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; 
stmts ->  stmt.stmts  	,  default } case 
iteration_stmt -> .for ( isnull_expr ; isnull_expr ; isnull_expr ) block_stmt  	,  const break continue for ( do id while if return switch default } case 
stmt -> .iteration_stmt  	,  const break continue for ( do id while if return switch default } case 
iteration_stmt -> .do block_stmt while ( logical_expression ) ;  	,  const break continue for ( do id while if return switch default } case 
jump_stmt -> .break ;  	,  const break continue for ( do id while if return switch default } case 
iteration_stmt -> .while ( logical_expression ) block_stmt  	,  const break continue for ( do id while if return switch default } case 
item -> .factor item'  	,  + - == <= < != = > >= ; 
stmt -> .branch_stmt  	,  const break continue for ( do id while if return switch default } case 
jump_stmt -> .return isnull_expr ;  	,  const break continue for ( do id while if return switch default } case 
factor -> .const  	,  % * / + - == <= < != = > >= ; 
branch_stmt -> .if ( logical_expression ) block_stmt result  	,  const break continue for ( do id while if return switch default } case 
value -> .item value'  	,  == <= < != = > >= ; 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; 

I512
item' ->  * factor item'.  	,  + - == <= < != = > >= , ; 

I513
item' ->  /.factor item'  	,  + - , ; 
factor -> .const  	,  % * / + - , ; 
factor -> .id call_func  	,  % * / + - , ; 
factor -> .id [ const ]  	,  % * / + - , ; 
factor -> .id  	,  % * / + - , ; 
factor -> .( value )  	,  % * / + - , ; 

I514
factor -> .const  	,  % * / + - , ; 
item' ->  *.factor item'  	,  + - , ; 
factor -> .id call_func  	,  % * / + - , ; 
factor -> .id [ const ]  	,  % * / + - , ; 
factor -> .id  	,  % * / + - , ; 
factor -> .( value )  	,  % * / + - , ; 

I515
operation ->  compare_op value.  	,  ) 

I516
branch_stmt ->  if.( logical_expression ) block_stmt result  	,  const break continue for ( do id while if return switch default } case 

I517
value' -> .+ item value'  	,  == <= < != = > >= ) 
value' ->  + item.value'  	,  == <= < != = > >= ) 
value' -> .  	,  == <= < != = > >= ) 
value' -> .- item value'  	,  == <= < != = > >= ) 

I518
factor ->  id call_func.  	,  % * / + - , ; 

I519
jump_stmt ->  continue.;  	,  const break continue for ( do id while if return switch default } case 

I520
jump_stmt ->  break.;  	,  const break continue for ( do id while if return switch default } case 

I521
factor ->  id [ const ].  	,  % * / + - == <= < != = > >= , ; 

I522
factor ->  ( value ).  	,  % * / + - == <= < != = > >= ) 

I523
item' -> .% factor item'  	,  + - == <= < != = > >= ) 
item' -> .* factor item'  	,  + - == <= < != = > >= ) 
item' -> .  	,  + - == <= < != = > >= ) 
item' ->  / factor.item'  	,  + - == <= < != = > >= ) 
item' -> ./ factor item'  	,  + - == <= < != = > >= ) 

I524
expression -> .value operation  	,  , ) 
item -> .factor item'  	,  + - == <= < != = > >= , ) 
factor -> .const  	,  % * / + - == <= < != = > >= , ) 
factor -> .id call_func  	,  % * / + - == <= < != = > >= , ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= , ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= , ) 
factor -> .id  	,  % * / + - == <= < != = > >= , ) 
call_func ->  (.es )  	,  % * / + - , ; 
es -> .expression eps  	,  ) 
value -> .item value'  	,  == <= < != = > >= , ) 

I525
iteration_stmt ->  while.( logical_expression ) block_stmt  	,  const break continue for ( do id while if return switch default } case 

I526
stmt ->  assign_stmt.  	,  const break continue for ( do id while if return switch default } case 

I527
item' ->  / factor item'.  	,  + - == <= < != = > >= , ; 

I528
block_stmt -> .{ stmts }  	,  while 
iteration_stmt ->  do.block_stmt while ( logical_expression ) ;  	,  const break continue for ( do id while if return switch default } case 

I529
iteration_stmt ->  for.( isnull_expr ; isnull_expr ; isnull_expr ) block_stmt  	,  const break continue for ( do id while if return switch default } case 

I530
factor -> .const  	,  % * / + - , ; 
item' ->  %.factor item'  	,  + - , ; 
factor -> .id call_func  	,  % * / + - , ; 
factor -> .id [ const ]  	,  % * / + - , ; 
factor -> .id  	,  % * / + - , ; 
factor -> .( value )  	,  % * / + - , ; 

I531
branch_stmt ->  switch.( id ) { case_stmt case_stmts default_stmt }  	,  const break continue for ( do id while if return switch default } case 

I532
factor -> .const  	,  % * / + - , ; 
item -> .factor item'  	,  + - , ; 
value' ->  +.item value'  	,  , ; 
factor -> .id call_func  	,  % * / + - , ; 
factor -> .id [ const ]  	,  % * / + - , ; 
factor -> .id  	,  % * / + - , ; 
factor -> .( value )  	,  % * / + - , ; 

I533
stmt ->  branch_stmt.  	,  const break continue for ( do id while if return switch default } case 

I534
iteration_stmt ->  for ( isnull_expr ; isnull_expr ; isnull_expr ) block_stmt.  	,  const break continue for ( do id while if return switch } 

I535
value' -> .+ item value'  	,  == <= < != = > >= ) 
value' ->  - item.value'  	,  == <= < != = > >= ) 
value' -> .  	,  == <= < != = > >= ) 
value' -> .- item value'  	,  == <= < != = > >= ) 

I536
stmt ->  iteration_stmt.  	,  const break continue for ( do id while if return switch default } case 

I537
value' ->  + item value'.  	,  == <= < != = > >= , ; 

I538
item' -> .% factor item'  	,  + - == <= < != = > >= ) 
item' -> .* factor item'  	,  + - == <= < != = > >= ) 
item' -> .  	,  + - == <= < != = > >= ) 
item' ->  % factor.item'  	,  + - == <= < != = > >= ) 
item' -> ./ factor item'  	,  + - == <= < != = > >= ) 

I539
item' ->  % factor item'.  	,  + - == <= < != = > >= , ; 

I540
value ->  item value'.  	,  , ; 

I541
operation ->  equal_op value.  	,  ) 

I542
factor ->  ( value.)  	,  % * / + - , ; 

I543
factor ->  id [ const.]  	,  % * / + - == <= < != = > >= ) 

I544
branch_stmt ->  switch ( id ) { case_stmt case_stmts default_stmt }.  	,  const break continue for ( do id while if return switch } 

I545
stmt ->  jump_stmt.  	,  const break continue for ( do id while if return switch default } case 

I546
value' ->  - item value'.  	,  == <= < != = > >= , ; 

I547
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; 
stmts -> .  	,  } 
stmt -> .jump_stmt  	,  const break continue for ( do id while if return switch } 
branch_stmt -> .if ( logical_expression ) block_stmt result  	,  const break continue for ( do id while if return switch } 
factor -> .id  	,  % * / + - == <= < != = > >= ; 
expression -> .value operation  	,  ; 
iteration_stmt -> .while ( logical_expression ) block_stmt  	,  const break continue for ( do id while if return switch } 
stmts -> .stmt stmts  	,  } 
jump_stmt -> .return isnull_expr ;  	,  const break continue for ( do id while if return switch } 
iteration_stmt -> .do block_stmt while ( logical_expression ) ;  	,  const break continue for ( do id while if return switch } 
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; 
stmt -> .iteration_stmt  	,  const break continue for ( do id while if return switch } 
iteration_stmt -> .for ( isnull_expr ; isnull_expr ; isnull_expr ) block_stmt  	,  const break continue for ( do id while if return switch } 
stmt -> .branch_stmt  	,  const break continue for ( do id while if return switch } 
default_stmt ->  default :.stmts  	,  } 
stmt -> .assign_stmt  	,  const break continue for ( do id while if return switch } 
jump_stmt -> .break ;  	,  const break continue for ( do id while if return switch } 
item -> .factor item'  	,  + - == <= < != = > >= ; 
assign_stmt -> .expression ;  	,  const break continue for ( do id while if return switch } 
jump_stmt -> .continue ;  	,  const break continue for ( do id while if return switch } 
factor -> .const  	,  % * / + - == <= < != = > >= ; 
branch_stmt -> .switch ( id ) { case_stmt case_stmts default_stmt }  	,  const break continue for ( do id while if return switch } 
value -> .item value'  	,  == <= < != = > >= ; 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; 

I548
case_stmt ->  case const : stmts.  	,  default } case 

I549
factor ->  id [.const ]  	,  % * / + - , ; 

I550
item ->  factor item'.  	,  + - , ; 

I551
item' -> .% factor item'  	,  + - == <= < != = > >= ) 
item' -> .* factor item'  	,  + - == <= < != = > >= ) 
item' -> .  	,  + - == <= < != = > >= ) 
item' ->  * factor.item'  	,  + - == <= < != = > >= ) 
item' -> ./ factor item'  	,  + - == <= < != = > >= ) 

I552
call_func ->  ( es ).  	,  % * / + - == <= < != = > >= , ; 

I553
isnull_expr -> .expression  	,  ; 
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; 
isnull_expr -> .  	,  ; 
factor -> .id  	,  % * / + - == <= < != = > >= ; 
expression -> .value operation  	,  ; 
item -> .factor item'  	,  + - == <= < != = > >= ; 
jump_stmt ->  return.isnull_expr ;  	,  const break continue for ( do id while if return switch default } case 
factor -> .const  	,  % * / + - == <= < != = > >= ; 
value -> .item value'  	,  == <= < != = > >= ; 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; 

I554
iteration_stmt ->  for.( isnull_expr ; isnull_expr ; isnull_expr ) block_stmt  	,  const break continue for ( do id while if return switch case default } 

I555
factor ->  ( value ).  	,  % * / + - , ; 

I556
iteration_stmt ->  while.( logical_expression ) block_stmt  	,  const break continue for ( do id while if return switch case default } 

I557
stmt ->  jump_stmt.  	,  const break continue for ( do id while if return switch case default } 

I558
case_stmt ->  case const : stmts.  	,  case default } 

I559
value' -> .+ item value'  	,  , ; 
value' ->  - item.value'  	,  , ; 
value' -> .  	,  , ; 
value' -> .- item value'  	,  , ; 

I560
item' ->  * factor.item'  	,  + - , ; 
item' -> ./ factor item'  	,  + - , ; 
item' -> .* factor item'  	,  + - , ; 
item' -> .% factor item'  	,  + - , ; 
item' -> .  	,  + - , ; 

I561
item' -> ./ factor item'  	,  + - , ; 
item' ->  % factor.item'  	,  + - , ; 
item' -> .* factor item'  	,  + - , ; 
item' -> .% factor item'  	,  + - , ; 
item' -> .  	,  + - , ; 

I562
branch_stmt ->  switch.( id ) { case_stmt case_stmts default_stmt }  	,  const break continue for ( do id while if return switch case default } 

I563
isnull_expr -> .expression  	,  ; 
iteration_stmt ->  for (.isnull_expr ; isnull_expr ; isnull_expr ) block_stmt  	,  const break continue for ( do id while if return switch default } case 
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; 
isnull_expr -> .  	,  ; 
factor -> .id  	,  % * / + - == <= < != = > >= ; 
expression -> .value operation  	,  ; 
item -> .factor item'  	,  + - == <= < != = > >= ; 
factor -> .const  	,  % * / + - == <= < != = > >= ; 
value -> .item value'  	,  == <= < != = > >= ; 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; 

I564
jump_stmt ->  return isnull_expr.;  	,  const break continue for ( do id while if return switch default } case 

I565
assign_stmt ->  expression.;  	,  const break continue for ( do id while if return switch case default } 

I566
jump_stmt ->  break ;.  	,  const break continue for ( do id while if return switch default } case 

I567
branch_stmt ->  if.( logical_expression ) block_stmt result  	,  const break continue for ( do id while if return switch case default } 

I568
stmt ->  assign_stmt.  	,  const break continue for ( do id while if return switch case default } 

I569
stmt ->  iteration_stmt.  	,  const break continue for ( do id while if return switch case default } 

I570
logical_expression -> .expression bool_expression  	,  ) 
item -> .factor item'  	,  + - == <= < != = > >= && || ) 
factor -> .id call_func  	,  % * / + - == <= < != = > >= && || ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= && || ) 
logical_expression -> .! expression bool_expression  	,  ) 
expression -> .value operation  	,  && || ) 
iteration_stmt ->  while (.logical_expression ) block_stmt  	,  const break continue for ( do id while if return switch default } case 
factor -> .id  	,  % * / + - == <= < != = > >= && || ) 
value -> .item value'  	,  == <= < != = > >= && || ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= && || ) 
factor -> .const  	,  % * / + - == <= < != = > >= && || ) 

I571
stmt ->  branch_stmt.  	,  const break continue for ( do id while if return switch case default } 

I572
value' ->  - item value'.  	,  == <= < != = > >= ) 

I573
factor ->  id [ const.]  	,  % * / + - , ; 

I574
item' ->  % factor item'.  	,  + - == <= < != = > >= ) 

I575
item' ->  / factor item'.  	,  + - == <= < != = > >= ) 

I576
item' ->  * factor item'.  	,  + - == <= < != = > >= ) 

I577
iteration_stmt ->  do block_stmt.while ( logical_expression ) ;  	,  const break continue for ( do id while if return switch default } case 

I578
stmts ->  stmt stmts.  	,  default } case 

I579
jump_stmt ->  continue.;  	,  const break continue for ( do id while if return switch case default } 

I580
assign_stmt ->  expression ;.  	,  const break continue for ( do id while if return switch default } case 

I581
isnull_expr -> .expression  	,  ; 
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; 
isnull_expr -> .  	,  ; 
factor -> .id  	,  % * / + - == <= < != = > >= ; 
expression -> .value operation  	,  ; 
item -> .factor item'  	,  + - == <= < != = > >= ; 
factor -> .const  	,  % * / + - == <= < != = > >= ; 
value -> .item value'  	,  == <= < != = > >= ; 
jump_stmt ->  return.isnull_expr ;  	,  const break continue for ( do id while if return switch case default } 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; 

I582
call_func ->  ( es ).  	,  % * / + - == <= < != = > >= ) 

I583
default_stmt ->  default : stmts.  	,  } 

I584
jump_stmt ->  break.;  	,  const break continue for ( do id while if return switch case default } 

I585
branch_stmt ->  switch (.id ) { case_stmt case_stmts default_stmt }  	,  const break continue for ( do id while if return switch default } case 

I586
value' ->  + item value'.  	,  == <= < != = > >= ) 

I587
jump_stmt ->  continue ;.  	,  const break continue for ( do id while if return switch default } case 

I588
item' ->  / factor.item'  	,  + - , ; 
item' -> ./ factor item'  	,  + - , ; 
item' -> .* factor item'  	,  + - , ; 
item' -> .% factor item'  	,  + - , ; 
item' -> .  	,  + - , ; 

I589
branch_stmt ->  if (.logical_expression ) block_stmt result  	,  const break continue for ( do id while if return switch default } case 
logical_expression -> .expression bool_expression  	,  ) 
item -> .factor item'  	,  + - == <= < != = > >= && || ) 
factor -> .id call_func  	,  % * / + - == <= < != = > >= && || ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= && || ) 
logical_expression -> .! expression bool_expression  	,  ) 
expression -> .value operation  	,  && || ) 
factor -> .id  	,  % * / + - == <= < != = > >= && || ) 
value -> .item value'  	,  == <= < != = > >= && || ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= && || ) 
factor -> .const  	,  % * / + - == <= < != = > >= && || ) 

I590
factor ->  id [ const ].  	,  % * / + - == <= < != = > >= ) 

I591
block_stmt -> .{ stmts }  	,  while 
iteration_stmt ->  do.block_stmt while ( logical_expression ) ;  	,  const break continue for ( do id while if return switch case default } 

I592
value' -> .+ item value'  	,  , ; 
value' ->  + item.value'  	,  , ; 
value' -> .  	,  , ; 
value' -> .- item value'  	,  , ; 

I593
call_func ->  ( es.)  	,  % * / + - , ; 

I594
iteration_stmt -> .for ( isnull_expr ; isnull_expr ; isnull_expr ) block_stmt  	,  const break continue for ( do id while if return switch case default } 
stmt -> .iteration_stmt  	,  const break continue for ( do id while if return switch case default } 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; 
jump_stmt -> .break ;  	,  const break continue for ( do id while if return switch case default } 
factor -> .id  	,  % * / + - == <= < != = > >= ; 
expression -> .value operation  	,  ; 
iteration_stmt -> .do block_stmt while ( logical_expression ) ;  	,  const break continue for ( do id while if return switch case default } 
stmts -> .stmt stmts  	,  case default } 
stmts -> .  	,  case default } 
branch_stmt -> .switch ( id ) { case_stmt case_stmts default_stmt }  	,  const break continue for ( do id while if return switch case default } 
stmts ->  stmt.stmts  	,  case default } 
stmt -> .assign_stmt  	,  const break continue for ( do id while if return switch case default } 
jump_stmt -> .continue ;  	,  const break continue for ( do id while if return switch case default } 
branch_stmt -> .if ( logical_expression ) block_stmt result  	,  const break continue for ( do id while if return switch case default } 
assign_stmt -> .expression ;  	,  const break continue for ( do id while if return switch case default } 
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; 
stmt -> .jump_stmt  	,  const break continue for ( do id while if return switch case default } 
stmt -> .branch_stmt  	,  const break continue for ( do id while if return switch case default } 
item -> .factor item'  	,  + - == <= < != = > >= ; 
factor -> .const  	,  % * / + - == <= < != = > >= ; 
iteration_stmt -> .while ( logical_expression ) block_stmt  	,  const break continue for ( do id while if return switch case default } 
jump_stmt -> .return isnull_expr ;  	,  const break continue for ( do id while if return switch case default } 
value -> .item value'  	,  == <= < != = > >= ; 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; 

I595
branch_stmt ->  switch (.id ) { case_stmt case_stmts default_stmt }  	,  const break continue for ( do id while if return switch case default } 

I596
iteration_stmt ->  while ( logical_expression.) block_stmt  	,  const break continue for ( do id while if return switch default } case 

I597
stmts ->  stmt stmts.  	,  case default } 

I598
factor ->  id [ const ].  	,  % * / + - , ; 

I599
jump_stmt ->  return isnull_expr.;  	,  const break continue for ( do id while if return switch case default } 

I600
jump_stmt ->  continue ;.  	,  const break continue for ( do id while if return switch case default } 

I601
iteration_stmt ->  for ( isnull_expr.; isnull_expr ; isnull_expr ) block_stmt  	,  const break continue for ( do id while if return switch default } case 

I602
item' ->  * factor item'.  	,  + - , ; 

I603
item' ->  / factor item'.  	,  + - , ; 

I604
jump_stmt ->  return isnull_expr ;.  	,  const break continue for ( do id while if return switch default } case 

I605
assign_stmt ->  expression ;.  	,  const break continue for ( do id while if return switch case default } 

I606
logical_expression -> .expression bool_expression  	,  ) 
item -> .factor item'  	,  + - == <= < != = > >= && || ) 
factor -> .id call_func  	,  % * / + - == <= < != = > >= && || ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= && || ) 
logical_expression -> .! expression bool_expression  	,  ) 
expression -> .value operation  	,  && || ) 
factor -> .id  	,  % * / + - == <= < != = > >= && || ) 
value -> .item value'  	,  == <= < != = > >= && || ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= && || ) 
branch_stmt ->  if (.logical_expression ) block_stmt result  	,  const break continue for ( do id while if return switch case default } 
factor -> .const  	,  % * / + - == <= < != = > >= && || ) 

I607
iteration_stmt ->  do block_stmt.while ( logical_expression ) ;  	,  const break continue for ( do id while if return switch case default } 

I608
isnull_expr -> .expression  	,  ; 
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; 
isnull_expr -> .  	,  ; 
iteration_stmt ->  for (.isnull_expr ; isnull_expr ; isnull_expr ) block_stmt  	,  const break continue for ( do id while if return switch case default } 
factor -> .id  	,  % * / + - == <= < != = > >= ; 
expression -> .value operation  	,  ; 
item -> .factor item'  	,  + - == <= < != = > >= ; 
factor -> .const  	,  % * / + - == <= < != = > >= ; 
value -> .item value'  	,  == <= < != = > >= ; 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; 

I609
logical_expression -> .expression bool_expression  	,  ) 
iteration_stmt ->  while (.logical_expression ) block_stmt  	,  const break continue for ( do id while if return switch case default } 
item -> .factor item'  	,  + - == <= < != = > >= && || ) 
factor -> .id call_func  	,  % * / + - == <= < != = > >= && || ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= && || ) 
logical_expression -> .! expression bool_expression  	,  ) 
expression -> .value operation  	,  && || ) 
factor -> .id  	,  % * / + - == <= < != = > >= && || ) 
value -> .item value'  	,  == <= < != = > >= && || ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= && || ) 
factor -> .const  	,  % * / + - == <= < != = > >= && || ) 

I610
item' ->  % factor item'.  	,  + - , ; 

I611
branch_stmt ->  switch ( id.) { case_stmt case_stmts default_stmt }  	,  const break continue for ( do id while if return switch default } case 

I612
jump_stmt ->  break ;.  	,  const break continue for ( do id while if return switch case default } 

I613
branch_stmt ->  if ( logical_expression.) block_stmt result  	,  const break continue for ( do id while if return switch default } case 

I614
iteration_stmt ->  do block_stmt while.( logical_expression ) ;  	,  const break continue for ( do id while if return switch default } case 

I615
value' ->  + item value'.  	,  , ; 

I616
call_func ->  ( es ).  	,  % * / + - , ; 

I617
value' ->  - item value'.  	,  , ; 

I618
iteration_stmt ->  for ( isnull_expr ;.isnull_expr ; isnull_expr ) block_stmt  	,  const break continue for ( do id while if return switch default } case 
isnull_expr -> .expression  	,  ; 
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; 
isnull_expr -> .  	,  ; 
factor -> .id  	,  % * / + - == <= < != = > >= ; 
expression -> .value operation  	,  ; 
item -> .factor item'  	,  + - == <= < != = > >= ; 
factor -> .const  	,  % * / + - == <= < != = > >= ; 
value -> .item value'  	,  == <= < != = > >= ; 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; 

I619
branch_stmt ->  if ( logical_expression.) block_stmt result  	,  const break continue for ( do id while if return switch case default } 

I620
iteration_stmt ->  do block_stmt while.( logical_expression ) ;  	,  const break continue for ( do id while if return switch case default } 

I621
iteration_stmt ->  while ( logical_expression.) block_stmt  	,  const break continue for ( do id while if return switch case default } 

I622
branch_stmt ->  switch ( id ).{ case_stmt case_stmts default_stmt }  	,  const break continue for ( do id while if return switch default } case 

I623
iteration_stmt ->  for ( isnull_expr.; isnull_expr ; isnull_expr ) block_stmt  	,  const break continue for ( do id while if return switch case default } 

I624
branch_stmt ->  switch ( id.) { case_stmt case_stmts default_stmt }  	,  const break continue for ( do id while if return switch case default } 

I625
iteration_stmt ->  while ( logical_expression ).block_stmt  	,  const break continue for ( do id while if return switch default } case 
block_stmt -> .{ stmts }  	,  const break continue for ( do id while if return switch default } case 

I626
jump_stmt ->  return isnull_expr ;.  	,  const break continue for ( do id while if return switch case default } 

I627
block_stmt -> .{ stmts }  	,  else const break continue for ( do id while if return switch default } case 
branch_stmt ->  if ( logical_expression ).block_stmt result  	,  const break continue for ( do id while if return switch default } case 

I628
logical_expression -> .expression bool_expression  	,  ) 
item -> .factor item'  	,  + - == <= < != = > >= && || ) 
factor -> .id call_func  	,  % * / + - == <= < != = > >= && || ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= && || ) 
logical_expression -> .! expression bool_expression  	,  ) 
expression -> .value operation  	,  && || ) 
factor -> .id  	,  % * / + - == <= < != = > >= && || ) 
value -> .item value'  	,  == <= < != = > >= && || ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= && || ) 
iteration_stmt ->  do block_stmt while (.logical_expression ) ;  	,  const break continue for ( do id while if return switch default } case 
factor -> .const  	,  % * / + - == <= < != = > >= && || ) 

I629
iteration_stmt ->  for ( isnull_expr ; isnull_expr.; isnull_expr ) block_stmt  	,  const break continue for ( do id while if return switch default } case 

I630
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; 
stmts -> .  	,  } 
stmt -> .jump_stmt  	,  const break continue for ( do id while if return switch } 
branch_stmt -> .if ( logical_expression ) block_stmt result  	,  const break continue for ( do id while if return switch } 
factor -> .id  	,  % * / + - == <= < != = > >= ; 
expression -> .value operation  	,  ; 
iteration_stmt -> .while ( logical_expression ) block_stmt  	,  const break continue for ( do id while if return switch } 
stmts -> .stmt stmts  	,  } 
jump_stmt -> .return isnull_expr ;  	,  const break continue for ( do id while if return switch } 
iteration_stmt -> .do block_stmt while ( logical_expression ) ;  	,  const break continue for ( do id while if return switch } 
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; 
stmt -> .iteration_stmt  	,  const break continue for ( do id while if return switch } 
iteration_stmt -> .for ( isnull_expr ; isnull_expr ; isnull_expr ) block_stmt  	,  const break continue for ( do id while if return switch } 
stmt -> .branch_stmt  	,  const break continue for ( do id while if return switch } 
stmt -> .assign_stmt  	,  const break continue for ( do id while if return switch } 
jump_stmt -> .break ;  	,  const break continue for ( do id while if return switch } 
item -> .factor item'  	,  + - == <= < != = > >= ; 
assign_stmt -> .expression ;  	,  const break continue for ( do id while if return switch } 
jump_stmt -> .continue ;  	,  const break continue for ( do id while if return switch } 
factor -> .const  	,  % * / + - == <= < != = > >= ; 
block_stmt ->  {.stmts }  	,  const break continue for ( do id while if return switch default } case 
branch_stmt -> .switch ( id ) { case_stmt case_stmts default_stmt }  	,  const break continue for ( do id while if return switch } 
value -> .item value'  	,  == <= < != = > >= ; 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; 

I631
result -> .else block_stmt  	,  const break continue for ( do id while if return switch default } case 
branch_stmt ->  if ( logical_expression ) block_stmt.result  	,  const break continue for ( do id while if return switch default } case 
result -> .  	,  const break continue for ( do id while if return switch default } case 

I632
isnull_expr -> .expression  	,  ; 
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; 
iteration_stmt ->  for ( isnull_expr ;.isnull_expr ; isnull_expr ) block_stmt  	,  const break continue for ( do id while if return switch case default } 
isnull_expr -> .  	,  ; 
factor -> .id  	,  % * / + - == <= < != = > >= ; 
expression -> .value operation  	,  ; 
item -> .factor item'  	,  + - == <= < != = > >= ; 
factor -> .const  	,  % * / + - == <= < != = > >= ; 
value -> .item value'  	,  == <= < != = > >= ; 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; 

I633
block_stmt ->  {.stmts }  	,  else const break continue for ( do id while if return switch default } case 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; 
stmts -> .  	,  } 
stmt -> .jump_stmt  	,  const break continue for ( do id while if return switch } 
branch_stmt -> .if ( logical_expression ) block_stmt result  	,  const break continue for ( do id while if return switch } 
factor -> .id  	,  % * / + - == <= < != = > >= ; 
expression -> .value operation  	,  ; 
iteration_stmt -> .while ( logical_expression ) block_stmt  	,  const break continue for ( do id while if return switch } 
stmts -> .stmt stmts  	,  } 
jump_stmt -> .return isnull_expr ;  	,  const break continue for ( do id while if return switch } 
iteration_stmt -> .do block_stmt while ( logical_expression ) ;  	,  const break continue for ( do id while if return switch } 
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; 
stmt -> .iteration_stmt  	,  const break continue for ( do id while if return switch } 
iteration_stmt -> .for ( isnull_expr ; isnull_expr ; isnull_expr ) block_stmt  	,  const break continue for ( do id while if return switch } 
stmt -> .branch_stmt  	,  const break continue for ( do id while if return switch } 
stmt -> .assign_stmt  	,  const break continue for ( do id while if return switch } 
jump_stmt -> .break ;  	,  const break continue for ( do id while if return switch } 
item -> .factor item'  	,  + - == <= < != = > >= ; 
assign_stmt -> .expression ;  	,  const break continue for ( do id while if return switch } 
jump_stmt -> .continue ;  	,  const break continue for ( do id while if return switch } 
factor -> .const  	,  % * / + - == <= < != = > >= ; 
branch_stmt -> .switch ( id ) { case_stmt case_stmts default_stmt }  	,  const break continue for ( do id while if return switch } 
value -> .item value'  	,  == <= < != = > >= ; 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; 

I634
iteration_stmt ->  do block_stmt while ( logical_expression.) ;  	,  const break continue for ( do id while if return switch default } case 

I635
logical_expression -> .expression bool_expression  	,  ) 
item -> .factor item'  	,  + - == <= < != = > >= && || ) 
factor -> .id call_func  	,  % * / + - == <= < != = > >= && || ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= && || ) 
logical_expression -> .! expression bool_expression  	,  ) 
iteration_stmt ->  do block_stmt while (.logical_expression ) ;  	,  const break continue for ( do id while if return switch case default } 
expression -> .value operation  	,  && || ) 
factor -> .id  	,  % * / + - == <= < != = > >= && || ) 
value -> .item value'  	,  == <= < != = > >= && || ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= && || ) 
factor -> .const  	,  % * / + - == <= < != = > >= && || ) 

I636
branch_stmt ->  switch ( id ) {.case_stmt case_stmts default_stmt }  	,  const break continue for ( do id while if return switch default } case 
case_stmt -> .case const : stmts  	,  default } case 

I637
iteration_stmt ->  while ( logical_expression ) block_stmt.  	,  const break continue for ( do id while if return switch default } case 

I638
block_stmt -> .{ stmts }  	,  else const break continue for ( do id while if return switch case default } 
branch_stmt ->  if ( logical_expression ).block_stmt result  	,  const break continue for ( do id while if return switch case default } 

I639
iteration_stmt ->  while ( logical_expression ).block_stmt  	,  const break continue for ( do id while if return switch case default } 
block_stmt -> .{ stmts }  	,  const break continue for ( do id while if return switch case default } 

I640
branch_stmt ->  switch ( id ).{ case_stmt case_stmts default_stmt }  	,  const break continue for ( do id while if return switch case default } 

I641
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; 
stmts -> .  	,  } 
stmt -> .jump_stmt  	,  const break continue for ( do id while if return switch } 
branch_stmt -> .if ( logical_expression ) block_stmt result  	,  const break continue for ( do id while if return switch } 
factor -> .id  	,  % * / + - == <= < != = > >= ; 
expression -> .value operation  	,  ; 
iteration_stmt -> .while ( logical_expression ) block_stmt  	,  const break continue for ( do id while if return switch } 
stmts -> .stmt stmts  	,  } 
jump_stmt -> .return isnull_expr ;  	,  const break continue for ( do id while if return switch } 
iteration_stmt -> .do block_stmt while ( logical_expression ) ;  	,  const break continue for ( do id while if return switch } 
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; 
stmt -> .iteration_stmt  	,  const break continue for ( do id while if return switch } 
iteration_stmt -> .for ( isnull_expr ; isnull_expr ; isnull_expr ) block_stmt  	,  const break continue for ( do id while if return switch } 
block_stmt ->  {.stmts }  	,  else const break continue for ( do id while if return switch case default } 
stmt -> .branch_stmt  	,  const break continue for ( do id while if return switch } 
stmt -> .assign_stmt  	,  const break continue for ( do id while if return switch } 
jump_stmt -> .break ;  	,  const break continue for ( do id while if return switch } 
item -> .factor item'  	,  + - == <= < != = > >= ; 
assign_stmt -> .expression ;  	,  const break continue for ( do id while if return switch } 
jump_stmt -> .continue ;  	,  const break continue for ( do id while if return switch } 
factor -> .const  	,  % * / + - == <= < != = > >= ; 
branch_stmt -> .switch ( id ) { case_stmt case_stmts default_stmt }  	,  const break continue for ( do id while if return switch } 
value -> .item value'  	,  == <= < != = > >= ; 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; 

I642
iteration_stmt ->  for ( isnull_expr ; isnull_expr.; isnull_expr ) block_stmt  	,  const break continue for ( do id while if return switch case default } 

I643
iteration_stmt ->  while ( logical_expression ) block_stmt.  	,  const break continue for ( do id while if return switch case default } 

I644
isnull_expr -> .expression  	,  ) 
factor -> .id call_func  	,  % * / + - == <= < != = > >= ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ) 
isnull_expr -> .  	,  ) 
factor -> .id  	,  % * / + - == <= < != = > >= ) 
expression -> .value operation  	,  ) 
item -> .factor item'  	,  + - == <= < != = > >= ) 
factor -> .const  	,  % * / + - == <= < != = > >= ) 
iteration_stmt ->  for ( isnull_expr ; isnull_expr ;.isnull_expr ) block_stmt  	,  const break continue for ( do id while if return switch default } case 
value -> .item value'  	,  == <= < != = > >= ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= ) 

I645
block_stmt ->  { stmts.}  	,  else const break continue for ( do id while if return switch default } case 

I646
iteration_stmt ->  do block_stmt while ( logical_expression.) ;  	,  const break continue for ( do id while if return switch case default } 

I647
result ->  else.block_stmt  	,  const break continue for ( do id while if return switch default } case 
block_stmt -> .{ stmts }  	,  const break continue for ( do id while if return switch default } case 

I648
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ; 
stmts -> .  	,  } 
stmt -> .jump_stmt  	,  const break continue for ( do id while if return switch } 
branch_stmt -> .if ( logical_expression ) block_stmt result  	,  const break continue for ( do id while if return switch } 
factor -> .id  	,  % * / + - == <= < != = > >= ; 
expression -> .value operation  	,  ; 
iteration_stmt -> .while ( logical_expression ) block_stmt  	,  const break continue for ( do id while if return switch } 
stmts -> .stmt stmts  	,  } 
jump_stmt -> .return isnull_expr ;  	,  const break continue for ( do id while if return switch } 
iteration_stmt -> .do block_stmt while ( logical_expression ) ;  	,  const break continue for ( do id while if return switch } 
factor -> .id call_func  	,  % * / + - == <= < != = > >= ; 
stmt -> .iteration_stmt  	,  const break continue for ( do id while if return switch } 
iteration_stmt -> .for ( isnull_expr ; isnull_expr ; isnull_expr ) block_stmt  	,  const break continue for ( do id while if return switch } 
stmt -> .branch_stmt  	,  const break continue for ( do id while if return switch } 
stmt -> .assign_stmt  	,  const break continue for ( do id while if return switch } 
jump_stmt -> .break ;  	,  const break continue for ( do id while if return switch } 
item -> .factor item'  	,  + - == <= < != = > >= ; 
block_stmt ->  {.stmts }  	,  const break continue for ( do id while if return switch case default } 
assign_stmt -> .expression ;  	,  const break continue for ( do id while if return switch } 
jump_stmt -> .continue ;  	,  const break continue for ( do id while if return switch } 
factor -> .const  	,  % * / + - == <= < != = > >= ; 
branch_stmt -> .switch ( id ) { case_stmt case_stmts default_stmt }  	,  const break continue for ( do id while if return switch } 
value -> .item value'  	,  == <= < != = > >= ; 
factor -> .( value )  	,  % * / + - == <= < != = > >= ; 

I649
iteration_stmt ->  do block_stmt while ( logical_expression ).;  	,  const break continue for ( do id while if return switch default } case 

I650
result -> .else block_stmt  	,  const break continue for ( do id while if return switch case default } 
branch_stmt ->  if ( logical_expression ) block_stmt.result  	,  const break continue for ( do id while if return switch case default } 
result -> .  	,  const break continue for ( do id while if return switch case default } 

I651
block_stmt ->  { stmts.}  	,  const break continue for ( do id while if return switch default } case 

I652
branch_stmt ->  switch ( id ) {.case_stmt case_stmts default_stmt }  	,  const break continue for ( do id while if return switch case default } 
case_stmt -> .case const : stmts  	,  default } case 

I653
branch_stmt ->  if ( logical_expression ) block_stmt result.  	,  const break continue for ( do id while if return switch default } case 

I654
case_stmts -> .case_stmt case_stmts  	,  default } 
case_stmts -> .  	,  default } 
branch_stmt ->  switch ( id ) { case_stmt.case_stmts default_stmt }  	,  const break continue for ( do id while if return switch default } case 
case_stmt -> .case const : stmts  	,  case default } 

I655
iteration_stmt ->  do block_stmt while ( logical_expression ) ;.  	,  const break continue for ( do id while if return switch default } case 

I656
isnull_expr -> .expression  	,  ) 
factor -> .id call_func  	,  % * / + - == <= < != = > >= ) 
factor -> .id [ const ]  	,  % * / + - == <= < != = > >= ) 
isnull_expr -> .  	,  ) 
factor -> .id  	,  % * / + - == <= < != = > >= ) 
expression -> .value operation  	,  ) 
item -> .factor item'  	,  + - == <= < != = > >= ) 
iteration_stmt ->  for ( isnull_expr ; isnull_expr ;.isnull_expr ) block_stmt  	,  const break continue for ( do id while if return switch case default } 
factor -> .const  	,  % * / + - == <= < != = > >= ) 
value -> .item value'  	,  == <= < != = > >= ) 
factor -> .( value )  	,  % * / + - == <= < != = > >= ) 

I657
iteration_stmt ->  for ( isnull_expr ; isnull_expr ; isnull_expr.) block_stmt  	,  const break continue for ( do id while if return switch default } case 

I658
result ->  else.block_stmt  	,  const break continue for ( do id while if return switch case default } 
block_stmt -> .{ stmts }  	,  const break continue for ( do id while if return switch case default } 

I659
block_stmt ->  { stmts.}  	,  else const break continue for ( do id while if return switch case default } 

I660
branch_stmt ->  switch ( id ) { case_stmt.case_stmts default_stmt }  	,  const break continue for ( do id while if return switch case default } 
case_stmts -> .case_stmt case_stmts  	,  default } 
case_stmts -> .  	,  default } 
case_stmt -> .case const : stmts  	,  case default } 

I661
result ->  else block_stmt.  	,  const break continue for ( do id while if return switch default } case 

I662
block_stmt ->  { stmts.}  	,  const break continue for ( do id while if return switch case default } 

I663
block_stmt ->  { stmts }.  	,  else const break continue for ( do id while if return switch default } case 

I664
branch_stmt ->  if ( logical_expression ) block_stmt result.  	,  const break continue for ( do id while if return switch case default } 

I665
branch_stmt ->  switch ( id ) { case_stmt case_stmts.default_stmt }  	,  const break continue for ( do id while if return switch default } case 
default_stmt -> .default : stmts  	,  } 
default_stmt -> .  	,  } 

I666
block_stmt ->  { stmts }.  	,  const break continue for ( do id while if return switch default } case 

I667
iteration_stmt ->  do block_stmt while ( logical_expression ).;  	,  const break continue for ( do id while if return switch case default } 

I668
block_stmt ->  { stmts }.  	,  const break continue for ( do id while if return switch case default } 

I669
result ->  else block_stmt.  	,  const break continue for ( do id while if return switch case default } 

I670
iteration_stmt ->  for ( isnull_expr ; isnull_expr ; isnull_expr.) block_stmt  	,  const break continue for ( do id while if return switch case default } 

I671
iteration_stmt ->  for ( isnull_expr ; isnull_expr ; isnull_expr ).block_stmt  	,  const break continue for ( do id while if return switch default } case 
block_stmt -> .{ stmts }  	,  const break continue for ( do id while if return switch default } case 

I672
iteration_stmt ->  do block_stmt while ( logical_expression ) ;.  	,  const break continue for ( do id while if return switch case default } 

I673
branch_stmt ->  switch ( id ) { case_stmt case_stmts default_stmt.}  	,  const break continue for ( do id while if return switch default } case 

I674
block_stmt ->  { stmts }.  	,  else const break continue for ( do id while if return switch case default } 

I675
branch_stmt ->  switch ( id ) { case_stmt case_stmts.default_stmt }  	,  const break continue for ( do id while if return switch case default } 
default_stmt -> .default : stmts  	,  } 
default_stmt -> .  	,  } 

I676
branch_stmt ->  switch ( id ) { case_stmt case_stmts default_stmt.}  	,  const break continue for ( do id while if return switch case default } 

I677
iteration_stmt ->  for ( isnull_expr ; isnull_expr ; isnull_expr ).block_stmt  	,  const break continue for ( do id while if return switch case default } 
block_stmt -> .{ stmts }  	,  const break continue for ( do id while if return switch case default } 

I678
iteration_stmt ->  for ( isnull_expr ; isnull_expr ; isnull_expr ) block_stmt.  	,  const break continue for ( do id while if return switch default } case 

I679
branch_stmt ->  switch ( id ) { case_stmt case_stmts default_stmt }.  	,  const break continue for ( do id while if return switch default } case 

I680
branch_stmt ->  switch ( id ) { case_stmt case_stmts default_stmt }.  	,  const break continue for ( do id while if return switch case default } 

I681
iteration_stmt ->  for ( isnull_expr ; isnull_expr ; isnull_expr ) block_stmt.  	,  const break continue for ( do id while if return switch case default } 

